{"version":3,"sources":["reportWebVitals.js","globalSettings.js","NavBar/NavBar.js","MainPage.js","GeneralizedTable.js","AddNewItemDropdown.js","RawMaterial/IzejvielasBlock.js","FixedCost/FixedCostBlock.js","Package/PackageBlock.js","Workers/WorkersBlock.js","Electricity/ElectricityBlock.js","Deposit/DepositBlock.js","AlcoholTax/AlcoholTaxBlock.js","ProductPage.js","Water/WaterBlock.js","GroupPage.js","AddNewItemButton.js","RawMaterial/RawMaterialAllPage.js","RawMaterial/RawMaterialAddPage.js","FixedCost/FixedCostAllAddPage.js","FixedCost/FixedCostAllPage.js","Water/WaterAllAddPage.js","Water/WaterAllPage.js","AddExpensesPage.js","Package/PackageAllPage.js","Package/PackageAddPage.js","Workers/WorkersAddPage.js","Workers/WorkersAllPage.js","Electricity/Electricity.js","Workers/RazGrupasAddPage.js","AlcoholTax/AlcoholTax.js","WarningDelete.js","FileСhoice.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","globalSettings","groupsFileName","productsFileName","rawMaterialFileName","fixedCostFileName","waterFileName","packageFileName","workersFileName","floatPrecision","floatPrecisionSecondary","floatPrecisionThird","ipcRenderer","window","require","lodash","NavBar","history","useHistory","handleClick","path","e","location","pathname","push","Navbar","bg","variant","sticky","Container","Brand","onClick","Toggle","Nav","className","NavDropdown","id","title","menuVariant","Item","Link","goBack","Button","data","JSON","parse","sendSync","productObjects","chain","get","value","izejvielasAll","pudeles","forEach","product","izejvielas","fiksetie","udens_sagatavosana","iepakojums","razosanas_grupas","elektriba","deposit","summa","iepakSumma","item","razGrupa","summa_without_package","toFixed","pudele_izejviela","find","nosaukums","undefined","objAdd","izejvielasObj","newKopuma","assign","parseFloat","alcohol_tax","stringify","ProductTable","groups","products","groupItems","group","productList","filter","x","grupa","GroupEntry","groupName","Table","striped","bordered","hover","size","props","colSpan","Products","itemList","componentList","ProductEntry","kods","cena","MainPage","GeneralizedTable","TableHeader","headerNames","this","tableBody","React","Component","headerList","toString","AddNewItemDropdown","type","to","from","send","IzejvielasTableBody","normaSumma","IzejvielaProductTableEntry","productName","useState","setCena","cenaValidated","setCenaValidated","daudzums","setDaudzums","daudzumsValidated","setDaudzumsValidated","kopuma","mervieniba","Cena","validated","handleChange","event","target","handleValidation","fileName","currentTarget","checkValidity","preventDefault","stopPropagation","cenaHandleValidation","Daudzums","newDaudzums","daudzumsHandleValidation","DeleteIzejvielaEntryButton","izejvielaName","Row","Col","Form","noValidate","Group","Control","required","placeholder","onChange","onBlur","style","width","height","Feedback","on","arg","remove","IzejvielasBlock","FixedCostTableBody","productObj","electricityGeneral","electricityObj","FixedCostBlock","PackageSize","fluid","as","md","Label","vienDaudzums","vienDaudzumsHandleChange","vienDaudzumsHandleValidation","PackageTableBody","expenses","summaIepak","summaVien","PackageProductTableEntry","key","norma","setNorma","normaValidated","setNormaValidated","setSummaIepak","setSummaVien","newSummaIepak","newSummaVien","console","log","Norma","normaHandleValidation","DeletePackageEntryButton","packageName","handleGeneral","dropDownButton","Dropdown","Menu","PackageBlock","vienDaudzumsTemp","setVienDaudzums","vienDaudzumsValidated","setVienDaudzumsValidated","newVienDaudzums","packageObj","elementi","ProductionGroupBlock","Amount","razGrupaObj","darbinieki","WorkersTableBody","razGrupNosaukums","DeleteRazGrupasButton","workers","summa_vien","WorkersTableEntry","alga","alga_nodoklis","darbinieksObj","newSumma","DeleteWorkersEntryButton","AddNewRazGrupaDropdown","handleCreateNew","info","WorkersBlock","razosanasGrupas","ElectricityTableBody","ElectricityBlock","DepositTableBody","obj","DepositBlock","alcohol","setAlcohol","alcoholValidated","setAlcoholValidated","volume","setVolume","volumeValidated","setVolumeValidated","AlcoholTaxBlock","CenaBezIepak","productObject","ProductPage","useParams","parseInt","WaterTableBody","WaterProductTableEntry","setValidated","DeleteEntryButton","entryName","WaterBlock","NavigationBar","GroupPage","AddNewItemButton","message","buttonFormatter","cell","row","rowIndex","DeleteRawButton","cellEdit","cellEditFactory","mode","blurToSave","afterSaveCell","oldValue","newValue","column","newCena","groupObjects","NewTable","SearchBar","Search","columns","dataField","text","editable","sort","headerAlign","headerStyle","validator","isNaN","valid","formatter","keyField","search","searchProps","srText","baseProps","bootstrap4","condensed","RawMaterialAllPage","RawMaterialAddPage","state","showAlert","alertMessage","handleKodsChange","bind","handleNameChange","handleMervienibaChange","handlePriceChange","setShowAlert","setAlertMessage","setState","InputAlert","onClose","Alert","dismissible","isNumeric","str","InputForm","handleSubmit","element","paramObj","tempData","controlId","Select","FixedCostAllAddPage","TableBody","fixedGeneral","productUpdate","Elements","list","Element","setSumma","summaValidated","setSummaValidated","fixedElementi","total","vien_summa","fixedObj","FixedCostAllPage","WaterAllAddPage","DeleteButton","WaterAllPage","destinationEntryName","AddExpensesPagePageClass","AddAlert","ExpenseTable","TableTitle","IzejvielaTable","ExpenseTableBody","formatExtraData","AddExpenseButton","Error","component","IzejvielaEntry","FixedEntry","WaterEntry","PackageEntry","WorkersEntry","RazGrupasEntry","cloneElement","ObjAdd","array","addExpenseToFile","AddExpensesPage","destinationEntryNameTemp","infoTemp","iepakObj","summa_iepak","PackageAllPage","PackageAddPage","WorkersAddPage","handleAlgaChange","nodoklis","alga_procents","Nodoklis","setNodoklis","nodoklisValidated","setNodoklisValidated","razGroup","darbinieks","Alga","setAlga","WorkersAllPage","elektribaObj","izlietota","setIzlietota","izlietotaValidated","setIzlietotaValidated","vienSumma","setVienSumma","vienSummaValidated","setVienSummaValidated","Electricity","RazGrupasAddClass","RazGrupasAddPage","alcoholTax","setAlcoholTax","alcoholTaxValidated","setAlcoholTaxValidated","AlcoholTax","WarningDelete","FileСhoice","filePath","setFilePath","ScrollToTop","useLocation","useEffect","scrollTo","NoMatch","ProductRouting","exact","RawMaterialRouting","GroupRouting","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4970fb3.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const globalSettings = {\r\n    groupsFileName : \"/data/groups-all.json\",\r\n    productsFileName : \"/data/products-all.json\",\r\n    rawMaterialFileName : \"/data/raw-material-all.json\",\r\n    fixedCostFileName : \"/data/fixed-cost-all.json\",\r\n    waterFileName : \"/data/water-all.json\",\r\n    packageFileName : \"/data/package-all.json\",\r\n    workersFileName : \"/data/workers.json\",\r\n    floatPrecision : 4, // Number of digits after comma\r\n    floatPrecisionSecondary : 5, // Number of digits after comma\r\n    floatPrecisionThird: 6 // Number of digits after comma\r\n}\r\n\r\nexport default globalSettings","import React from 'react';\r\nimport '../App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Container from 'react-bootstrap/Container';\r\n// import Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport globalSettings from \"./../globalSettings\"\r\n\r\nimport {\r\n    useHistory\r\n} from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction NavBar() {\r\n    let history = useHistory();\r\n\r\n    function handleClick(path, e) {\r\n        // Only push to the location which is different from the current one\r\n        if (path !== history.location.pathname) {\r\n            history.push(path);\r\n        }\r\n    }\r\n\r\n    function goBack() {\r\n        history.goBack();\r\n    }\r\n\r\n    function primeCalculate() {\r\n        // Get all data\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        \r\n        // Get all products\r\n        let productObjects = lodash\r\n            .chain(data)\r\n            .get(\"produkti\")\r\n            .value()\r\n\r\n        // Get all grupas\r\n        // let groupObjects = lodash\r\n        //     .chain(data)\r\n        //     .get(\"grupas\")\r\n        //     .value()\r\n\r\n        let izejvielasAll = data[\"izejvielas\"]\r\n        let pudeles = []\r\n\r\n        // Calculate for pudeles first\r\n        productObjects.forEach(product => {\r\n            if (product[\"grupa\"] === \"Pudeles\") {\r\n                let izejvielas = product[\"izejvielas\"]\r\n                let fiksetie = product[\"fiksētie\"]\r\n                let udens_sagatavosana = product[\"udens_sagatavosana\"]\r\n                let iepakojums = product[\"iepakojums\"][\"elementi\"]\r\n                let razosanas_grupas = product[\"ražošanas_grupas\"]\r\n                let elektriba = product[\"elektriba\"]\r\n                let deposit = product[\"deposit\"]\r\n\r\n                let summa = 0\r\n                let iepakSumma = 0\r\n\r\n                // Calculate for izejvielas\r\n                izejvielas.forEach(item => {\r\n                    summa += item[\"kopuma\"]\r\n                })\r\n                // Calculate for udens_sagatavosana\r\n                udens_sagatavosana.forEach(item => {\r\n                    summa += item[\"cena\"]\r\n                })\r\n                // Calculate for iepakojums\r\n                iepakojums.forEach(item => {\r\n                    summa += item[\"summa_vien\"]\r\n                    iepakSumma += item[\"summa_vien\"]\r\n                })\r\n                // Calculate for salary\r\n                razosanas_grupas.forEach(razGrupa => {\r\n                    razGrupa[\"darbinieki\"].forEach(item => {\r\n                        summa += item[\"summa_vien\"]\r\n                    })\r\n                })\r\n                // Calculate for elektriba\r\n                summa += elektriba[\"summa\"]\r\n                // Calculate for fiksetie\r\n                summa += fiksetie[\"summa\"]\r\n                // Calculate for deposit\r\n                summa += deposit\r\n\r\n                let summa_without_package = summa - deposit - iepakSumma\r\n\r\n                // Update the pudele's prime price\r\n                product[\"cena\"] = summa.toFixed(globalSettings[\"floatPrecisionThird\"])\r\n                product[\"cena(bez iepak.)\"] = summa_without_package.toFixed(globalSettings[\"floatPrecisionThird\"])\r\n\r\n                //  If the product is bottle, put into the list\r\n                pudeles.push(product)\r\n            }\r\n        })\r\n\r\n        // Update the list of pudeles in the raw material list\r\n        productObjects.forEach(product => {\r\n            if (product[\"grupa\"] === \"Pudeles\") {\r\n                let pudele_izejviela = lodash\r\n                    .chain(izejvielasAll)\r\n                    .find({nosaukums : product.nosaukums})\r\n                    .value()\r\n\r\n                if (pudele_izejviela === undefined) {\r\n                    // Create the entry if not in the list\r\n                    let objAdd = {\r\n                        \"kods\": \"pudele\",\r\n                        \"nosaukums\": product.nosaukums,\r\n                        \"mervieniba\": \"gab\",\r\n                        \"cena\": product[\"cena(bez iepak.)\"]\r\n                    }\r\n\r\n                    izejvielasAll.push(objAdd) // Add new object \r\n                } else {\r\n                    // Just change the price if already in the list\r\n                    pudele_izejviela[\"cena\"] = product[\"cena(bez iepak.)\"]\r\n                }\r\n\r\n                // Update the values in each product and group\r\n                productObjects.forEach(item => {\r\n                    // Get object\r\n                    let izejvielasObj = lodash\r\n                            .chain(item)\r\n                            .get(\"izejvielas\")\r\n                            .find({nosaukums: product.nosaukums})\r\n                            .value()\r\n                    // If object exists\r\n                    if (izejvielasObj !== undefined) {\r\n                        let newKopuma = product[\"cena(bez iepak.)\"] * izejvielasObj[\"daudzums\"]\r\n\r\n                        lodash\r\n                            .chain(izejvielasObj)\r\n                            .assign({\"cena\" : product[\"cena(bez iepak.)\"]})\r\n                            .assign({\"kopuma\" : parseFloat(newKopuma)})\r\n                            .value()\r\n                    }\r\n\r\n                })\r\n        \r\n            }\r\n        })\r\n\r\n        // Update the list of pudeles in the raw material list\r\n        // pudeles.forEach(item => {\r\n        //     let pudele_izejviela = lodash\r\n        //         .chain(izejvielasAll)\r\n        //         .find({nosaukums : item.nosaukums})\r\n        //         .value()\r\n\r\n        //     if (pudele_izejviela === undefined) {\r\n        //         // Create the entry if not in the list\r\n        //         let objAdd = {\r\n        //             \"kods\": \"pudele\",\r\n        //             \"nosaukums\": item.nosaukums,\r\n        //             \"mervieniba\": \"gab\",\r\n        //             \"cena\": item[\"cena(bez iepak.)\"]\r\n        //         }\r\n\r\n        //         izejvielasAll.push(objAdd) // Add new object \r\n        //     } else {\r\n        //         // Just change the price if already in the list\r\n        //         pudele_izejviela[\"cena\"] = item[\"cena(bez iepak.)\"]\r\n        //     }\r\n\r\n        //     // Update the values in each product and group\r\n        //     productObjects.forEach(product => {\r\n\t\t// \t\t// Get object\r\n\t\t// \t\tlet izejvielasObj = lodash\r\n\t\t// \t\t\t\t.chain(product)\r\n\t\t// \t\t\t\t.get(\"izejvielas\")\r\n\t\t// \t\t\t\t.find({nosaukums: item.nosaukums})\r\n\t\t// \t\t\t\t.value()\r\n\t\t// \t\t// If object exists\r\n\t\t// \t\tif (izejvielasObj !== undefined) {\r\n\t\t// \t\t\tlet newKopuma = item.cena * izejvielasObj[\"daudzums\"]\r\n\r\n\t\t// \t\t\tlodash\r\n\t\t// \t\t\t\t.chain(izejvielasObj)\r\n\t\t// \t\t\t\t.assign({\"cena\" : item.cena})\r\n\t\t// \t\t\t\t.assign({\"kopuma\" : parseFloat(newKopuma)})\r\n\t\t// \t\t\t\t.value()\r\n\t\t// \t\t}\r\n\r\n\t\t// \t})\r\n        // })\r\n        \r\n        // Update the prime price again, using updated bottle prices\r\n        productObjects.forEach(product => {\r\n            let izejvielas = product[\"izejvielas\"]\r\n            let fiksetie = product[\"fiksētie\"]\r\n            let udens_sagatavosana = product[\"udens_sagatavosana\"]\r\n            let iepakojums = product[\"iepakojums\"][\"elementi\"]\r\n            let razosanas_grupas = product[\"ražošanas_grupas\"]\r\n            let elektriba = product[\"elektriba\"]\r\n            let deposit = product[\"deposit\"]\r\n            let alcohol_tax = product[\"alcohol_tax\"]\r\n\r\n            let summa = 0\r\n\r\n            // Calculate for izejvielas\r\n            izejvielas.forEach(item => {\r\n                summa += item[\"kopuma\"]\r\n            })\r\n\r\n            // Calculate for udens_sagatavosana\r\n            udens_sagatavosana.forEach(item => {\r\n                summa += item[\"cena\"]\r\n            })\r\n            // Calculate for iepakojums\r\n            iepakojums.forEach(item => {\r\n                summa += item[\"summa_vien\"]\r\n            })\r\n            // Calculate for iepakojums\r\n            razosanas_grupas.forEach(razGrupa => {\r\n                razGrupa[\"darbinieki\"].forEach(item => {\r\n                    summa += item[\"summa_vien\"]\r\n                })\r\n            })\r\n\r\n            // Calculate for elektriba\r\n            summa += elektriba[\"summa\"]\r\n            // Calculate for fiksetie\r\n            summa += fiksetie[\"summa\"]\r\n            // Calculate for deposit\r\n            summa += deposit\r\n            // Calculate for alcohol tax\r\n            if (alcohol_tax != null) summa += alcohol_tax[\"summa\"]\r\n\r\n            // Update the product's prime price\r\n            product[\"cena\"] = summa\r\n        })\r\n\r\n        // Update the database\r\n        ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n    }\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n            <Container>\r\n                <Navbar.Brand onClick={() => handleClick(\"/\")}>На главную</Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\r\n                    <Nav className=\"me-auto\">\r\n                        <NavDropdown\r\n                            id=\"nav-dropdown-dark-example\"\r\n                            title=\"Общий список\"\r\n                            menuVariant=\"dark\" \r\n                            >\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/raw-material-all\")}>Сырье</NavDropdown.Item>\r\n                            {/* <NavDropdown.Item onClick={() => handleClick(\"/water-all\")}>Водоподготовка</NavDropdown.Item> */}\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/package-all\")}>Упаковка</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/workers-all\")}>Список рабочих</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/electricity\")}>Цена на электричество</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/fixed-cost-all\")}>Фиксированные затраты</NavDropdown.Item>\r\n                            <NavDropdown.Item onClick={() => handleClick(\"/alcohol-tax\")}>Акциз</NavDropdown.Item>\r\n                        </NavDropdown>\r\n                    </Nav>\r\n                    <Nav>\r\n                        <Nav.Link onClick={() => goBack()}>Назад</Nav.Link>\r\n                    </Nav>\r\n\r\n                    <Button variant=\"outline-success\" onClick={primeCalculate}>Вычислить себестоимость</Button>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n  }\r\n\r\n  export default NavBar;","import React from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Table from 'react-bootstrap/Table';\r\nimport NavBar from \"./NavBar/NavBar\"\r\n\r\nimport globalSettings from \"./globalSettings\"\r\n\r\nimport {\r\n    useHistory\r\n} from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\n// const lodash = require('lodash');\r\n\r\nfunction MainPage() {\r\n  return (\r\n    <>\r\n        <NavBar/>\r\n        <ProductTable/>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ProductTable() {\r\n    // Get raw material data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let groups = data[\"grupas\"];\r\n    let products = data[\"produkti\"];\r\n\r\n    let groupItems = [];\r\n    groups.forEach((group) => {\r\n        // Get all products of the group\r\n        let productList = products.filter(x => x.grupa === group.nosaukums)\r\n\r\n        groupItems.push(\r\n            <GroupEntry groupName={group.nosaukums} productList={productList} key={group.nosaukums} />\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Table striped bordered hover size=\"sm\">\r\n            <thead>\r\n            <tr>\r\n                <th>Kods</th>\r\n                <th>Nosaukums</th>\r\n                <th>Евро/бут.</th>\r\n            </tr>\r\n            </thead>\r\n            <tbody>\r\n                {groupItems}\r\n            </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nfunction GroupEntry(props) {\r\n    // let history = useHistory();\r\n\r\n    // function handleClick() {\r\n    //     history.push(\"/group-\" + props.groupName);\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <tr className=\"table-secondary\">\r\n                <td colSpan=\"3\" /* onClick={handleClick} */ >{props.groupName}</td>\r\n            </tr> \r\n            <Products productList={props.productList}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Products(props) {\r\n    let itemList = props.productList\r\n    let componentList = [];\r\n    // Make the list of components\r\n    itemList.forEach((item) => {\r\n        componentList.push(<ProductEntry key={item.nosaukums} item={item} />)\r\n    })\r\n    return componentList;\r\n}\r\n\r\nfunction ProductEntry(props) {\r\n    let history = useHistory();\r\n\r\n    function handleClick() {\r\n        history.push(\"/product-\" + props.item.kods);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <td>{props.item.kods}</td>\r\n            <td className=\"product-cell\" onClick={handleClick}>{props.item.nosaukums}</td>\r\n            <td>{parseFloat(props.item.cena).toFixed(globalSettings[\"floatPrecision\"])}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Table from 'react-bootstrap/Table';\r\n\r\nclass GeneralizedTable extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props)\r\n    // }\r\n  \r\n\trender() {\r\n\t\treturn (\r\n            <>\r\n               <Table striped bordered hover size=\"sm\"> \r\n                    <TableHeader headerNames={this.props.headerNames}/>\r\n                    {this.props.tableBody}\r\n                </Table>\r\n            </>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction TableHeader(props) {\r\n    let headerList = []\r\n    props.headerNames.forEach(item => {\r\n        headerList.push(\r\n            <th key={item.toString()}>{item}</th>\r\n        )\r\n    })\r\n    \r\n    return (\r\n        <thead className=\"text-center\">\r\n            <tr>\r\n                {headerList}\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default GeneralizedTable","import Button from 'react-bootstrap/Button';\r\nconst { ipcRenderer } = window.require(\"electron\");\r\n\r\nfunction AddNewItemDropdown(props) {\r\n\r\n\tfunction handleGeneral(event, type) {\r\n        ipcRenderer.send(\"expenses-add-window\", [ props.nosaukums, JSON.stringify(type) ]);\r\n\t}\r\n\r\n    // let dropDownButton = \"\"\r\n    // if (props.type === \"produkti\") {\r\n    //     dropDownButton = \r\n    //         <Dropdown>\r\n    //             <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\" size=\"sm\">\r\n    //                 Добавить из\r\n    //             </Dropdown.Toggle>\r\n    //             <Dropdown.Menu>\r\n    //                 <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"izejvielas\", type:\"all\"})}>Общий список</Dropdown.Item>\r\n    //                 <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"izejvielas\", type:\"group\"})}>Список группы</Dropdown.Item>\r\n    //             </Dropdown.Menu>\r\n    //         </Dropdown>\r\n    // } else if (props.type === \"grupas\") {\r\n    //     dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"grupas\", from:\"izejvielas\", type:\"all\"})}>Добавить</Button>\r\n    // }\r\n\r\n\treturn (\r\n        <div className=\"addEntryButtons\"> \r\n            <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"produkti\", from:props.from, type:\"all\"})}>Добавить</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewItemDropdown;","import React, { useState } from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport globalSettings from '../globalSettings';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport AddNewItemDropdown from '../AddNewItemDropdown';\r\n\r\n// import BootstrapTable from 'react-bootstrap-table-next';\r\n\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction IzejvielasBlock(props) {\r\n\r\n    let headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Norma\", \"Цена/ед\", \"Убрать\"]\r\n\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Сырьё</h3>\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<IzejvielasTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n            <AddNewItemDropdown nosaukums={props.nosaukums} type={props.type} from={\"izejvielas\"}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction IzejvielasTableBody(props) {\r\n    // Get raw material data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let izejvielas = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .get(\"izejvielas\")\r\n        .value()\r\n        \r\n    let componentList = [];\r\n    let summa = 0.0\r\n    let normaSumma = 0.0\r\n\r\n    // Make the list of components\r\n    izejvielas.forEach((item) => {\r\n        componentList.push(<IzejvielaProductTableEntry key={item.nosaukums} item={item} productName={props.nosaukums} {...props}/>)\r\n        summa += item[\"kopuma\"]\r\n        if (item[\"mervieniba\"] !== \"gab\") {\r\n            normaSumma += item[\"daudzums\"]\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <tbody>\r\n            {componentList}\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td className=\"text-end fw-bold\">Kopā:</td>\r\n                <td>{parseFloat(normaSumma).toFixed(2) + \" (kg, l)\"}</td>\r\n                <td>{parseFloat(summa).toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\n\r\nfunction IzejvielaProductTableEntry(props) {\r\n    const [cena, setCena] = useState(parseFloat(props.item.cena));\r\n    const [cenaValidated, setCenaValidated] = useState(false);\r\n\r\n    const [daudzums, setDaudzums] = useState(parseFloat(props.item.daudzums));\r\n    const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    let kopuma = parseFloat(props.item.kopuma);\r\n\r\n    function cenaHandleValidation(fileName, event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setCenaValidated(true);\r\n        } else {\r\n            setCenaValidated(false);\r\n            // Update the value\r\n            let newKopuma = daudzums * cena;\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"izejvielas\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"cena\" : parseFloat(cena)})\r\n                .assign({\"kopuma\" : parseFloat(newKopuma)})\r\n                .value()\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            \r\n        }\r\n    };\r\n\r\n    function daudzumsHandleValidation(fileName, event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setDaudzumsValidated(true);\r\n        } else {\r\n            setDaudzumsValidated(false);\r\n            // Update the value\r\n            let newDaudzums = event.target.value;\r\n            let newKopuma = newDaudzums * cena;\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"izejvielas\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"daudzums\" : parseFloat(newDaudzums)})\r\n                .assign({\"kopuma\" : parseFloat(newKopuma)})\r\n                .value()\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    };\r\n\r\n    function cenaHandleChange(event) {\r\n        setCena(event.target.value)\r\n    };\r\n\r\n    function daudzumsHandleChange(event) {\r\n        setDaudzums(event.target.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <tr className=\"align-middle\">\r\n            <td>{props.item.kods}</td>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.mervieniba}</td>\r\n            <td>\r\n                <Cena \r\n                    validated={cenaValidated}\r\n                    cena={cena}\r\n                    handleChange={cenaHandleChange}\r\n                    handleValidation={(e) => cenaHandleValidation(props.fileName, e)}\r\n                    fileName={props.fileName}\r\n                />\r\n            </td>\r\n            <td>\r\n                <Daudzums \r\n                    validated={daudzumsValidated}\r\n                    daudzums={daudzums}\r\n                    handleChange={daudzumsHandleChange}\r\n                    handleValidation={(e) => daudzumsHandleValidation(props.fileName, e)}\r\n                    fileName={props.fileName}\r\n                />\r\n            </td>\r\n            <td>\r\n                {parseFloat(kopuma).toFixed(globalSettings[\"floatPrecision\"] + 1)}\r\n            </td>\r\n            <td>\r\n                <DeleteIzejvielaEntryButton \r\n                    izejvielaName={props.item.nosaukums} \r\n                    productName={props.productName} \r\n                    fileName={props.fileName}\r\n                    {...props}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction Cena(props) {\r\n    return (  \r\n        \r\n        <Container>\r\n        <Row>\r\n            <Col>\r\n                <Form noValidate validated={props.validated}>\r\n                    <Form.Group>\r\n                        <Form.Control id=\"cena\" type=\"number\" required \r\n                            placeholder=\"Цена\" \r\n                            value={props.cena} \r\n                            onChange={props.handleChange}\r\n                            onBlur={props.handleValidation}\r\n                            style={{ width: '120px', height: '28px' }}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Введите цену\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>  \r\n                </Form> \r\n            </Col>\r\n        </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction Daudzums(props) {\r\n    return (\r\n        <Form noValidate validated={props.validated}>\r\n            <Form.Group>\r\n                <Form.Control id=\"daudzums\" type=\"number\" required \r\n                    placeholder=\"Кол-во\" \r\n                    value={props.daudzums} \r\n                    onChange={props.handleChange}\r\n                    onBlur={props.handleValidation}\r\n                    style={{ width: '120px', height: '28px' }}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Введите количество\r\n                </Form.Control.Feedback>\r\n            </Form.Group>  \r\n        </Form>      \r\n    )\r\n}\r\n\r\nfunction DeleteIzejvielaEntryButton(props) {\r\n\tfunction handleClick() {\r\n        // let productName = props.productName;\r\n\t\tlet izejvielaName = props.izejvielaName;\r\n\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        \r\n        ipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"izejvielas\")\r\n                .remove({nosaukums: izejvielaName})\r\n                .value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={(e) => handleClick(props.fileName, e)}>удалить</Button>\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default IzejvielasBlock;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport '../App.css';\r\n\r\nimport globalSettings from '../globalSettings';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction FixedCostBlock(props) {\r\n\r\n    let headerNames = [\"Название\", \"Значение\"]\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Фиксированные расходы</h3>\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<FixedCostTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction FixedCostTableBody(props) {\r\n    // Get electricity data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let productObj = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .value()\r\n\r\n    let electricityGeneral = lodash\r\n        .chain(data)\r\n        .get(\"fiksētie\")\r\n        .value()\r\n\r\n    let electricityObj = productObj[\"fiksētie\"]\r\n\r\n    const [daudzums, setDaudzums] = useState(electricityObj[\"vien_daudzums\"]);\r\n    const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    function daudzumsHandleChange(event) {\r\n        setDaudzums(event.target.value)\r\n    };\r\n\r\n    function daudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setDaudzumsValidated(true);\r\n        } else {\r\n            setDaudzumsValidated(false);\r\n            // Update the value\r\n            electricityObj[\"vien_daudzums\"] = parseFloat(daudzums)\r\n            electricityObj[\"summa\"] = electricityGeneral[\"vien_summa\"] * electricityObj[\"vien_daudzums\"] \r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\" >Общая цена за единицу:</td>\r\n                    <td className=\"col-md-6\">{electricityGeneral[\"vien_summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Количество единиц:</td>\r\n                    <td>\r\n                        <Form noValidate validated={daudzumsValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={daudzums} \r\n                                    onChange={daudzumsHandleChange}\r\n                                    onBlur={daudzumsHandleValidation}\r\n                                    style={{ width: '120px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Сумма:</td>\r\n                    <td>{electricityObj[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default FixedCostBlock;","import React, { useState } from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport globalSettings from '../globalSettings';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n// import AddNewItemButton from './AddNewItemButton';\r\n\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nlet fileName = \"/..\"\r\n\r\nfunction PackageBlock(props) {\r\n\r\n    let headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Norma\", \"Summa/iepak\", \"Цена/ед\", \"Убрать\"]\r\n\r\n    // Get vienibas daudzums\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    let vienDaudzumsTemp = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .get(\"iepakojums\")\r\n        .get(\"daudzums\")\r\n        .value()\r\n    \r\n    // Get the vien daudzums\r\n    const [vienDaudzums, setVienDaudzums] = useState(parseFloat(vienDaudzumsTemp));\r\n    const [vienDaudzumsValidated, setVienDaudzumsValidated] = useState(false);\r\n\r\n    function vienDaudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setVienDaudzumsValidated(true);\r\n        } else {\r\n            setVienDaudzumsValidated(false);\r\n            // Update the values\r\n            let newVienDaudzums = event.target.value;\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n            let packageObj = lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.nosaukums})\r\n                .get(\"iepakojums\")\r\n                .value()\r\n\r\n            let elementi = packageObj[\"elementi\"]\r\n\r\n            packageObj[\"daudzums\"] = parseFloat(newVienDaudzums)\r\n\r\n            // Update the summa_vien entry for each item\r\n            elementi.forEach(item => {\r\n                item[\"summa_vien\"] = item[\"summa_iepak\"] / packageObj[\"daudzums\"]\r\n            })\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    };\r\n\r\n    function vienDaudzumsHandleChange(event) {\r\n        setVienDaudzums(event.target.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Упаковка</h3>\r\n            <PackageSize \r\n                validated={vienDaudzumsValidated}\r\n                vienDaudzums={vienDaudzums}\r\n                vienDaudzumsHandleChange={vienDaudzumsHandleChange}\r\n                vienDaudzumsHandleValidation={(e) => vienDaudzumsHandleValidation(e)}\r\n                fileName={props.fileName}\r\n            />\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<PackageTableBody \r\n                    vienDaudzums={vienDaudzums}\r\n                    {...props}\r\n                />}\r\n            />\r\n            <AddNewItemDropdown nosaukums={props.nosaukums} type={props.type}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PackageSize(props) {\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Form noValidate validated={props.validated}>\r\n                <Form.Group as={Row}>\r\n                    <Col md=\"4\">\r\n                        <div className=\"text-end\">\r\n                            <Form.Label>Количество единиц в упаковке:</Form.Label>\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        <Form.Control id=\"daudzums\" type=\"number\" required \r\n                            placeholder=\"Кол-во\" \r\n                            value={props.vienDaudzums} \r\n                            onChange={props.vienDaudzumsHandleChange}\r\n                            onBlur={props.vienDaudzumsHandleValidation}\r\n                            style={{ width: '120px', height: '30px' }}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Введите количество\r\n                        </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>  \r\n            </Form>   \r\n        </Container>\r\n    )\r\n}\r\n\r\nfunction PackageTableBody(props) {\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    let expenses = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .get(\"iepakojums\")\r\n        .get(\"elementi\")\r\n        .value()\r\n\r\n    // let expenses = JSON.parse(data)\r\n    let componentList = [];\r\n    let summaIepak = 0\r\n    let summaVien = 0\r\n\r\n    // Make the list of components\r\n    expenses.forEach((item) => {\r\n        componentList.push(\r\n            <PackageProductTableEntry \r\n                {...props}\r\n                key={item.nosaukums} \r\n                item={item} \r\n                productName={props.nosaukums} \r\n                fileName={fileName} />)\r\n\r\n        summaIepak += item[\"summa_iepak\"]\r\n        summaVien += item[\"summa_vien\"]\r\n    })\r\n    \r\n    return (\r\n        <tbody>\r\n            {componentList}\r\n            <tr>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td className=\"text-end fw-bold\">Kopā:</td>\r\n                <td>{summaIepak.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                <td>{summaVien.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nfunction PackageProductTableEntry(props) {\r\n    const [cena, setCena] = useState(parseFloat(props.item.cena));\r\n    const [cenaValidated, setCenaValidated] = useState(false);\r\n\r\n    const [norma, setNorma] = useState(parseFloat(props.item.norma));\r\n    const [normaValidated, setNormaValidated] = useState(false);\r\n\r\n    const [summaIepak, setSummaIepak] = useState(parseFloat(norma * cena));\r\n    const [summaVien, setSummaVien] = useState(summaIepak / props.vienDaudzums);\r\n\r\n    function cenaHandleValidation(fileName, event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setCenaValidated(true);\r\n        } else {\r\n            setCenaValidated(false);\r\n\r\n            let newSummaIepak = norma * cena\r\n            let newSummaVien = (newSummaIepak / props.vienDaudzums) \r\n            // Update the value\r\n            setSummaIepak(newSummaIepak)\r\n            setSummaVien(newSummaVien)\r\n\r\n            console.log(cena)\r\n            console.log(norma)\r\n            console.log(newSummaIepak)\r\n            console.log(newSummaVien)\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"iepakojums\")\r\n                .get(\"elementi\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"summa_iepak\" : parseFloat(newSummaIepak)})\r\n                .assign({\"summa_vien\" : parseFloat(newSummaVien)})\r\n                .assign({\"cena\" : parseFloat(cena)})\r\n                .value()\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    };\r\n\r\n    function normaHandleValidation(fileName, event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setNormaValidated(true);\r\n        } else {\r\n            setNormaValidated(false);\r\n            // Update the value\r\n            let newSummaIepak = norma * cena;\r\n            let newSummaVien = newSummaIepak / props.vienDaudzums\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"iepakojums\")\r\n                .get(\"elementi\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"summa_iepak\" : parseFloat(newSummaIepak)})\r\n                .assign({\"summa_vien\" : parseFloat(newSummaVien)})\r\n                .assign({\"norma\" : parseFloat(norma)})\r\n                .value()\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    };\r\n\r\n    function cenaHandleChange(event) {\r\n        setCena(event.target.value)\r\n    };\r\n    function normaHandleChange(event) {\r\n        setNorma(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <tr className=\"align-middle\">\r\n            <td>{props.item.kods}</td>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.mervieniba}</td>\r\n            <td>\r\n                <Cena \r\n                    validated={cenaValidated}\r\n                    cena={cena}\r\n                    handleChange={cenaHandleChange}\r\n                    handleValidation={(e) => cenaHandleValidation(props.fileName, e)}\r\n                    fileName={props.fileName}\r\n                />\r\n            </td>\r\n            <td>\r\n                <Norma \r\n                    validated={normaValidated}\r\n                    norma={norma}\r\n                    handleChange={normaHandleChange}\r\n                    handleValidation={(e) => normaHandleValidation(props.fileName, e)}\r\n                    fileName={props.fileName}\r\n                />\r\n            </td>\r\n            <td>\r\n                {summaIepak.toFixed(globalSettings[\"floatPrecisionSecondary\"])}\r\n            </td>\r\n            <td>\r\n                {summaVien.toFixed(globalSettings[\"floatPrecisionSecondary\"])}\r\n            </td>\r\n            <td>\r\n                <DeletePackageEntryButton \r\n                    packageName={props.item.nosaukums} \r\n                    productName={props.productName} \r\n                    fileName={props.fileName}\r\n                    {...props}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction Cena(props) {\r\n    return (\r\n        <Form noValidate validated={props.validated}>\r\n            <Form.Group>\r\n                <Form.Control id=\"cena\" type=\"number\" required \r\n                    placeholder=\"Цена\" \r\n                    value={props.cena} \r\n                    onChange={props.handleChange}\r\n                    onBlur={props.handleValidation}\r\n                    style={{ width: '120px', height: '28px' }}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Введите цену\r\n                </Form.Control.Feedback>\r\n            </Form.Group>  \r\n        </Form>      \r\n    )\r\n}\r\n\r\nfunction Norma(props) {\r\n    return (\r\n        <Form noValidate validated={props.validated}>\r\n            <Form.Group>\r\n                <Form.Control id=\"daudzums\" type=\"number\" required \r\n                    placeholder=\"Кол-во\" \r\n                    value={props.norma} \r\n                    onChange={props.handleChange}\r\n                    onBlur={props.handleValidation}\r\n                    style={{ width: '120px', height: '28px' }}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Введите количество\r\n                </Form.Control.Feedback>\r\n            </Form.Group>  \r\n        </Form>      \r\n    )\r\n}\r\n\r\nfunction DeletePackageEntryButton(props) {\r\n\tfunction handleClick() {\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n        ipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"iepakojums\")\r\n                .get(\"elementi\")\r\n                .remove({nosaukums: props.packageName})\r\n                .value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={(e) => handleClick(props.fileName, e)}>удалить</Button>\r\n\t)\r\n}\r\n\r\n\r\nfunction AddNewItemDropdown(props) {\r\n\r\n\tfunction handleGeneral(event, type) {\r\n        ipcRenderer.send(\"expenses-add-window\", [ props.nosaukums, JSON.stringify(type) ]);\r\n\t}\r\n\r\n    let dropDownButton = \"\"\r\n    if (props.type === \"produkti\") {\r\n        dropDownButton = \r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\" size=\"sm\">\r\n                    Добавить из\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"iepakojums\", type:\"all\"})}>Общий список</Dropdown.Item>\r\n                    <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"iepakojums\", type:\"group\"})}>Список группы</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n    } else if (props.type === \"grupas\") {\r\n        dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"grupas\", from:\"iepakojums\", type:\"all\"})}>Добавить</Button>\r\n    }\r\n\r\n\treturn (\r\n        <div className=\"addEntryButtons\"> \r\n            {dropDownButton}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PackageBlock;","import React, { useState } from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nimport globalSettings from '../globalSettings';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n// import AddNewItemButton from './AddNewItemButton';\r\n\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction WorkersBlock(props) {\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let razosanasGrupas = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .get(\"ražošanas_grupas\")\r\n        .value()\r\n        \r\n    let componentList = []\r\n\r\n    razosanasGrupas.forEach(item => {\r\n        componentList.push(\r\n            <ProductionGroupBlock \r\n                {...props}\r\n                key={item.nosaukums} \r\n                item={item} \r\n                productName={props.nosaukums}  />)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"text-center\">Зарплата</h3>\r\n            {componentList}\r\n            <AddNewRazGrupaDropdown \r\n                productName={props.nosaukums} \r\n                {...props}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction ProductionGroupBlock(props) {\r\n\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let nodoklis = lodash\r\n        .chain(data)\r\n        .get(\"darbinieku_nodoklis\")\r\n        .value()\r\n\r\n    let headerNames = [\"Darbinieks\", \"Alga\", \"Alga ar nodokļi (\" + nodoklis + \"%)\", \"Часов работы\", \"Summa\", \"Цена/ед\",\"Убрать\"]\r\n\r\n    // // Get the vien daudzums\r\n    const [vienDaudzums, setVienDaudzums] = useState(parseFloat(props.item.daudzums));\r\n    const [vienDaudzumsValidated, setVienDaudzumsValidated] = useState(false);\r\n\r\n    function vienDaudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setVienDaudzumsValidated(true);\r\n        } else {\r\n            setVienDaudzumsValidated(false);\r\n            // Update the value\r\n            let newVienDaudzums = event.target.value;\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n            let razGrupaObj = lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"ražošanas_grupas\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .value()\r\n            \r\n            let darbinieki = razGrupaObj[\"darbinieki\"]\r\n\r\n            razGrupaObj[\"daudzums\"] = parseFloat(newVienDaudzums)\r\n\r\n            // Update the summa_vien entry for each item\r\n            darbinieki.forEach(item => {\r\n                item[\"summa_vien\"] = item[\"summa\"] / razGrupaObj[\"daudzums\"]\r\n            })\r\n\r\n\r\n            \r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n    function vienDaudzumsHandleChange(event) {\r\n        setVienDaudzums(event.target.value)\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <h4 className=\"text-center\">{props.item.nosaukums}</h4>\r\n            <Amount \r\n                validated={vienDaudzumsValidated}\r\n                vienDaudzums={vienDaudzums}\r\n                vienDaudzumsHandleChange={vienDaudzumsHandleChange}\r\n                vienDaudzumsHandleValidation={(e) => vienDaudzumsHandleValidation(e)}\r\n            />\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<WorkersTableBody \r\n                    vienDaudzums={vienDaudzums}\r\n                    razGrupNosaukums={props.item.nosaukums}\r\n                    {...props}\r\n                />}\r\n            />\r\n            <AddNewItemDropdown nosaukums={props.nosaukums} type={props.type} {...props}/>\r\n            <DeleteRazGrupasButton {...props} razGrupNosaukums={props.item.nosaukums}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Amount(props) {\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Form noValidate validated={props.validated}>\r\n                <Form.Group as={Row}>\r\n                    <Col md=\"4\">\r\n                        <div className=\"text-end\">\r\n                            <Form.Label>Количество единиц произведено:</Form.Label>\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                            <Form.Control id=\"daudzums\" type=\"number\" required \r\n                                placeholder=\"Кол-во\" \r\n                                value={props.vienDaudzums} \r\n                                onChange={props.vienDaudzumsHandleChange}\r\n                                onBlur={props.vienDaudzumsHandleValidation}\r\n                                style={{ width: '120px', height: '30px' }}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Введите количество\r\n                            </Form.Control.Feedback>\r\n                    </Col>\r\n                </Form.Group>  \r\n            </Form> \r\n        </Container>  \r\n    )\r\n}\r\n\r\nfunction WorkersTableBody(props) {\r\n    let workers = props.item.darbinieki\r\n    let componentList = [];\r\n\r\n    let summa = 0.0\r\n    let summa_vien = 0.0\r\n\r\n    // Make the list of components\r\n    workers.forEach((item) => {\r\n        componentList.push(\r\n            <WorkersTableEntry \r\n                {...props}\r\n                key={item.nosaukums} \r\n                razGrupNosaukums={props.razGrupNosaukums}\r\n                item={item} \r\n                productName={props.nosaukums} \r\n             />)\r\n        summa += item[\"summa\"]\r\n        summa_vien += item[\"summa_vien\"]\r\n    })\r\n    \r\n    return (\r\n        <tbody>\r\n            {componentList}\r\n            <tr className=\"align-middle\">\r\n                <td></td>\r\n                <td></td>\r\n                <td></td>\r\n                <td className=\"text-end fw-bold\">Kopā:</td>\r\n                <td>{summa.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                <td>{summa_vien.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nfunction WorkersTableEntry(props) {\r\n\r\n    const [norma, setNorma] = useState(parseFloat(props.item.norma));\r\n    const [normaValidated, setNormaValidated] = useState(false);\r\n\r\n    const [summa] = useState(parseFloat(props.item.summa));\r\n    const [summaVien] = useState(summa / props.vienDaudzums);\r\n\r\n\r\n    function normaHandleValidation(fileName, event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setNormaValidated(true);\r\n        } else {\r\n            setNormaValidated(false);\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            let darbinieksObj = lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"ražošanas_grupas\")\r\n                .find({nosaukums: props.razGrupNosaukums})\r\n                .get(\"darbinieki\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .value()\r\n            \r\n            // Update the value\r\n            let newSumma = norma * darbinieksObj[\"alga_nodoklis\"];\r\n            let newSummaVien = newSumma / props.vienDaudzums\r\n\r\n            lodash\r\n                .chain(darbinieksObj)\r\n                .assign({\"summa\" : parseFloat(newSumma)})\r\n                .assign({\"summa_vien\" : parseFloat(newSummaVien)})\r\n                .assign({\"norma\" : parseFloat(norma)})\r\n                .value()\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n    function normaHandleChange(event) {\r\n        setNorma(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <tr className=\"align-middle\">\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.alga}</td>\r\n            <td>{props.item.alga_nodoklis.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n            <td>\r\n                <Norma \r\n                    validated={normaValidated}\r\n                    norma={norma}\r\n                    handleChange={normaHandleChange}\r\n                    handleValidation={(e) => normaHandleValidation(props.fileName, e)}\r\n                    fileName={props.fileName}\r\n                />\r\n            </td>\r\n            <td>\r\n                {summa.toFixed(globalSettings[\"floatPrecisionSecondary\"])}\r\n            </td>\r\n            <td>\r\n                {summaVien.toFixed(globalSettings[\"floatPrecisionSecondary\"])}\r\n            </td>\r\n            <td>\r\n                <DeleteWorkersEntryButton \r\n                    {...props}\r\n                />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction Norma(props) {\r\n    return (\r\n        <Form noValidate validated={props.validated}>\r\n            <Form.Group>\r\n                <Form.Control id=\"daudzums\" type=\"number\" required \r\n                    placeholder=\"Кол-во\" \r\n                    value={props.norma} \r\n                    onChange={props.handleChange}\r\n                    onBlur={props.handleValidation}\r\n                    style={{ width: '120px', height: '30px' }}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Введите количество\r\n                </Form.Control.Feedback>\r\n            </Form.Group>  \r\n        </Form>      \r\n    )\r\n}\r\n\r\nfunction DeleteWorkersEntryButton(props) {\r\n\tfunction handleClick() {\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n        ipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"ražošanas_grupas\")\r\n                .find({nosaukums: props.razGrupNosaukums})\r\n                .get(\"darbinieki\")\r\n                .remove({nosaukums: props.item.nosaukums})\r\n                .value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={(e) => handleClick(props.fileName, e)}>удалить</Button>\r\n\t)\r\n}\r\n\r\nfunction DeleteRazGrupasButton(props) {\r\n\tfunction handleClick() {\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n        ipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"ražošanas_grupas\")\r\n                .remove({nosaukums: props.razGrupNosaukums})\r\n                .value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={(e) => handleClick(props.fileName, e)}>Удалить группу</Button>\r\n\t)\r\n}\r\n\r\nfunction AddNewRazGrupaDropdown(props) {\r\n\r\n\tfunction handleGeneral(event) {\r\n        let info = {to:\"produkti\", from:\"ražošanas_grupas\", type:\"group\"}\r\n\r\n        ipcRenderer.send(\"expenses-add-window\", [ props.nosaukums, JSON.stringify(info) ]);\r\n\t}\r\n\r\n    function handleCreateNew(event, info) {\r\n\r\n        ipcRenderer.send(\"razGrupas:ask-for-window\", [ JSON.stringify(info) ]);\r\n\r\n\t}\r\n\r\n\r\n    let dropDownButton = \"\"\r\n    if (props.type === \"produkti\") {\r\n        dropDownButton = \r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\" size=\"sm\">\r\n                    Добавить группу производства из\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={e => handleGeneral(e)}>Список группы</Dropdown.Item>\r\n                    <Dropdown.Item onClick={e => handleCreateNew(e, {productName: props.productName, type:\"produkti\"})}>Создать Новый</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n    } else if (props.type === \"grupas\") {\r\n        dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleCreateNew(e, {productName: props.productName, type:\"grupas\"})}>Добавить группу производства</Button>\r\n    }\r\n\r\n\treturn (\r\n        <div className=\"addEntryButtons\"> \r\n            {dropDownButton}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction AddNewItemDropdown(props) {\r\n\r\n\tfunction handleGeneral(event, type) {\r\n        ipcRenderer.send(\"expenses-add-window\", [ props.nosaukums, JSON.stringify(type) ]);\r\n\t}\r\n\r\n    let dropDownButton = \"\"\r\n    if (props.type === \"produkti\") {\r\n        dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"produkti\", from:\"darbinieki\", type:\"all\", \"raz_grupas_nosaukums\" : props.item.nosaukums})}>Добавить работника</Button>\r\n    } else if (props.type === \"grupas\") {\r\n        dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"grupas\", from:\"darbinieki\", type:\"all\", \"raz_grupas_nosaukums\" : props.item.nosaukums})}>Добавить работника</Button>\r\n    }\r\n\r\n\treturn (\r\n        <div className=\"addEntryButtons\"> \r\n            {dropDownButton}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkersBlock;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import Dropdown from 'react-bootstrap/Dropdown';\r\n// import Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n// import Col from 'react-bootstrap/Col';\r\n// import Row from 'react-bootstrap/Row';\r\n\r\nimport globalSettings from '../globalSettings';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n// import AddNewItemButton from './AddNewItemButton';\r\n\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction ElectricityBlock(props) {\r\n\r\n    let headerNames = [\"Название\", \"Значение\"]\r\n\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Электричество</h3>\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<ElectricityTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction ElectricityTableBody(props) {\r\n    // Get electricity data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let productObj = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .value()\r\n\r\n    let electricityGeneral = lodash\r\n        .chain(data)\r\n        .get(\"elektriba\")\r\n        .value()\r\n\r\n    let electricityObj = productObj[\"elektriba\"]\r\n\r\n    const [daudzums, setDaudzums] = useState(electricityObj[\"vien_daudzums\"]);\r\n    const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    function daudzumsHandleChange(event) {\r\n        setDaudzums(event.target.value)\r\n    };\r\n\r\n    function daudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setDaudzumsValidated(true);\r\n        } else {\r\n            setDaudzumsValidated(false);\r\n            // Update the value\r\n            electricityObj[\"vien_daudzums\"] = parseFloat(daudzums)\r\n            electricityObj[\"summa\"] = electricityGeneral[\"vien_summa\"] * electricityObj[\"vien_daudzums\"] \r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\" >Общая цена за единицу:</td>\r\n                    <td className=\"col-md-6\">{electricityGeneral[\"vien_summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Количество единиц:</td>\r\n                    <td>\r\n                        <Form noValidate validated={daudzumsValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={daudzums} \r\n                                    onChange={daudzumsHandleChange}\r\n                                    onBlur={daudzumsHandleValidation}\r\n                                    style={{ width: '120px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Сумма:</td>\r\n                    <td>{electricityObj[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                {/* </tr> */}\r\n                {/* <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Сумма:</td>\r\n                    <td>{electricityObj[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                <tr className=\"align-middle \">\r\n                    <td className=\"text-end\">Цена/ед:</td>\r\n                    <td>{electricityObj[\"vien_summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr> */}\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ElectricityBlock;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport '../App.css';\r\n\r\nimport globalSettings from '../globalSettings';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction DepositBlock(props) {\r\n\r\n    let headerNames = [\"Название\", \"Значение\"]\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Депозит</h3>\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<DepositTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nfunction DepositTableBody(props) {\r\n    // Get electricity data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let productObj = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .value()\r\n\r\n    let obj = productObj[\"deposit\"]\r\n\r\n    // const [daudzums, setDaudzums] = useState(electricityObj[\"vien_daudzums\"]);\r\n    // const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    // function daudzumsHandleChange(event) {\r\n    //     setDaudzums(event.target.value)\r\n    // };\r\n\r\n    // function daudzumsHandleValidation(event) {\r\n    //     const form = event.currentTarget;\r\n    //     if (form.checkValidity() === false) {\r\n    //         event.preventDefault();\r\n    //         event.stopPropagation();\r\n    //         setDaudzumsValidated(true);\r\n    //     } else {\r\n    //         setDaudzumsValidated(false);\r\n    //         // Update the value\r\n    //         electricityObj[\"vien_daudzums\"] = parseFloat(daudzums)\r\n    //         electricityObj[\"summa\"] = electricityGeneral[\"vien_summa\"] * electricityObj[\"vien_daudzums\"] \r\n\r\n    //         ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n    //     }\r\n    // };\r\n\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\">Сумма:</td>\r\n                    <td>{obj.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default DepositBlock;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport '../App.css';\r\n\r\nimport globalSettings from '../globalSettings';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction AlcoholTaxBlock(props) {\r\n\r\n    let headerNames = [\"Название\", \"Значение\"]\r\n\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let productObj = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .value()\r\n\r\n    let obj = productObj[\"alcohol_tax\"]\r\n\r\n    if (obj == null) {\r\n        return null;\r\n    } else {\r\n        return (\r\n            <> \r\n                <h3 className=\"text-center\">Акциз</h3>\r\n                <GeneralizedTable \r\n                    headerNames={headerNames}\r\n                    tableBody=\r\n                    {<DepositTableBody \r\n                        {...props}\r\n                    />}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nfunction DepositTableBody(props) {\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    let productObj = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .value()\r\n\r\n    let obj = productObj[\"alcohol_tax\"]\r\n\r\n    const [alcohol, setAlcohol] = useState(obj[\"alcohol\"]);\r\n    const [alcoholValidated, setAlcoholValidated] = useState(false);\r\n\r\n    const [volume, setVolume] = useState(obj[\"volume\"]);\r\n    const [volumeValidated, setVolumeValidated] = useState(false);\r\n\r\n    function volumeHandleChange(event) {\r\n        setVolume(event.target.value)\r\n    };\r\n\r\n    function alcoholHandleChange(event) {\r\n        setAlcohol(event.target.value)\r\n    };\r\n\r\n    function volumeHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setVolumeValidated(true);\r\n        } else {\r\n            setVolumeValidated(false);\r\n            // Update the value\r\n            obj[\"volume\"] = parseFloat(volume)\r\n            obj[\"summa\"] = ((obj[\"value\"] * obj[\"alcohol\"]) / 100) * obj[\"volume\"];\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n    function alcoholHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setAlcoholValidated(true);\r\n        } else {\r\n            setAlcoholValidated(false);\r\n            // Update the value\r\n            obj[\"alcohol\"] = parseFloat(alcohol)\r\n            obj[\"summa\"] = ((obj[\"value\"] * obj[\"alcohol\"]) / 100) * obj[\"volume\"];\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\">Акциз (за 1 градус на 100л):</td>\r\n                    <td>{obj[\"value\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Градусность (%):</td>\r\n                    <td>\r\n                        <Form noValidate validated={alcoholValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={alcohol} \r\n                                    onChange={alcoholHandleChange}\r\n                                    onBlur={alcoholHandleValidation}\r\n                                    style={{ width: '120px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Обьём (Л):</td>\r\n                    <td>\r\n                        <Form noValidate validated={volumeValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={volume} \r\n                                    onChange={volumeHandleChange}\r\n                                    onBlur={volumeHandleValidation}\r\n                                    style={{ width: '120px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\">Сумма:</td>\r\n                    <td>{obj[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default AlcoholTaxBlock;","import React from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import NavDropdown from 'react-bootstrap/NavDropdown';\r\n// import Container from 'react-bootstrap/Container';\r\n\r\nimport IzejvielasBlock from './RawMaterial/IzejvielasBlock';\r\nimport FixedCostBlock from './FixedCost/FixedCostBlock';\r\n// import WaterBlock from './Water/WaterBlock';\r\nimport PackageBlock from './Package/PackageBlock';\r\nimport WorkersBlock from './Workers/WorkersBlock';\r\nimport ElectricityBlock from './Electricity/ElectricityBlock';\r\nimport DepositBlock from './Deposit/DepositBlock';\r\nimport NavBar from \"./NavBar/NavBar\"\r\n\r\nimport globalSettings from './globalSettings';\r\n\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\nimport AlcoholTaxBlock from './AlcoholTax/AlcoholTaxBlock';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction ProductPage() {\r\n\t// We can use the `useParams` hook here to access\r\n\t// the dynamic pieces of the URL.\r\n\tlet { kods } = useParams();\r\n\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tlet productObject = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"produkti\")\r\n\t\t.find({kods: parseInt(kods)})\r\n\t\t.value()\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{/* <NavigationBar destinationName={productObject[\"nosaukums\"]}/> */}\r\n\t\t\t<NavBar/>\r\n            <h2>{\"Produkts: \" + productObject[\"nosaukums\"]}</h2>\r\n\t\t\t<h4>{\"Kods: \" + productObject[\"kods\"]}</h4>\r\n\t\t\t<h4>{\"Cena: \" + parseFloat(productObject[\"cena\"]).toFixed(globalSettings[\"floatPrecision\"])}</h4>\r\n\t\t\t<CenaBezIepak productObject={productObject}/>\r\n\t\t\t<ElectricityBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n            <IzejvielasBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n            <FixedCostBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n\t\t\t{/* <WaterBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/> */}\r\n\t\t\t<PackageBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n\t\t\t<WorkersBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n\t\t\t<DepositBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n\t\t\t<AlcoholTaxBlock nosaukums={productObject[\"nosaukums\"]} type={\"produkti\"}/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nfunction CenaBezIepak(props) {\r\n\tlet productObject = props.productObject\r\n\tif (productObject[\"grupa\"] === \"Pudeles\") {\r\n\t\treturn (<h4>{\"Cena bez iepak: \" + parseFloat(productObject[\"cena(bez iepak.)\"]).toFixed(globalSettings[\"floatPrecision\"])}</h4>)\r\n\t}\r\n\r\n\treturn null\r\n}\r\n\r\n\r\n\r\nexport default ProductPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\n// import AddNewItemButton from './AddNewItemButton';\r\nimport '../App.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction WaterBlock(props) {\r\n\r\n    let headerNames = [\"Элемент водоподготовки\", \"Цена/ед\", \"Убрать\"]\r\n\r\n    return (\r\n        <> \r\n            <h3 className=\"text-center\">Водоподготовка</h3>\r\n            <GeneralizedTable \r\n                headerNames={headerNames}\r\n                tableBody=\r\n                {<WaterTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n            <AddNewItemDropdown nosaukums={props.nosaukums} type={props.type}/>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction WaterTableBody(props) {\r\n    // Get raw material data from main process\r\n    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    let itemList = lodash\r\n        .chain(data)\r\n        .get(props.type)\r\n        .find({nosaukums: props.nosaukums})\r\n        .get(\"udens_sagatavosana\")\r\n        .value()\r\n\r\n    let componentList = [];\r\n    let summa = 0\r\n\r\n    // Make the list of components\r\n    itemList.forEach((item) => {\r\n        componentList.push(<WaterProductTableEntry key={item.nosaukums} item={item} productName={props.nosaukums} {...props} />)\r\n        summa += item[\"cena\"]\r\n    })\r\n    \r\n    return (\r\n        <tbody>\r\n            {componentList}\r\n            <tr>\r\n                <td className=\"text-end fw-bold\">Kopā:</td>\r\n                <td>{summa}</td>\r\n            </tr>\r\n        </tbody>\r\n    )\r\n}\r\n\r\nfunction WaterProductTableEntry(props) {\r\n    const [cena, setCena] = useState(parseFloat(props.item.cena));\r\n    const [validated, setValidated] = useState(false);\r\n\r\n    function handleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setValidated(true);\r\n        } else {\r\n            setValidated(false);\r\n            // Update the value\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: props.productName})\r\n                .get(\"udens_sagatavosana\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"cena\" : parseFloat(cena)})\r\n                .value()\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    };\r\n\r\n    function handleChange(event) {\r\n        setCena(event.target.value)\r\n    };\r\n\r\n    return (\r\n        <tr className=\"align-middle\">\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>\r\n                <Form noValidate validated={validated}>\r\n                    <Form.Group>\r\n                        <Form.Control type=\"number\" required \r\n                            placeholder=\"Цена\" \r\n                            value={cena} \r\n                            onChange={handleChange}\r\n                            onBlur={handleValidation}\r\n                            style={{ width: '120px', height: '30px' }}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Введите цену\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>  \r\n                </Form>           \r\n            </td>\r\n            <td>\r\n                <DeleteEntryButton entryName={props.item.nosaukums} productName={props.productName} {...props} />\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction DeleteEntryButton(props) {\r\n\tfunction handleClick() {\r\n        let productName = props.productName;\r\n\t\tlet entryName = props.entryName;\r\n\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n        ipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n            lodash\r\n                .chain(data)\r\n                .get(props.type)\r\n                .find({nosaukums: productName})\r\n                .get(\"udens_sagatavosana\")\r\n                .remove({nosaukums: entryName})\r\n                .value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={handleClick}>удалить</Button>\r\n\t)\r\n}\r\n\r\n\r\nfunction AddNewItemDropdown(props) {\r\n\r\n\tfunction handleGeneral(event, type) {\r\n        ipcRenderer.send(\"expenses-add-window\", [ props.nosaukums, JSON.stringify(type) ]);\r\n\t}\r\n\r\n    // function handleGroup() {\r\n    //     ipcRenderer.send(\"\");\r\n\t// }\r\n\r\n\tlet dropDownButton = \"\"\r\n    if (props.type === \"produkti\") {\r\n        dropDownButton = \r\n            <Dropdown>\r\n                <Dropdown.Toggle variant=\"secondary\" id=\"dropdown-basic\" size=\"sm\">\r\n                    Добавить из\r\n                </Dropdown.Toggle>\r\n                <Dropdown.Menu>\r\n                    <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"udens_sagatavosana\", type:\"all\"})}>Общий список</Dropdown.Item>\r\n                    <Dropdown.Item onClick={e => handleGeneral(e, {to:\"produkti\", from:\"udens_sagatavosana\", type:\"group\"})}>Список группы</Dropdown.Item>\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n    } else if (props.type === \"grupas\") {\r\n        dropDownButton = <Button variant=\"secondary\" size=\"sm\" onClick={e => handleGeneral(e, {to:\"grupas\", from:\"udens_sagatavosana\", type:\"all\"})}>Добавить</Button>\r\n    }\r\n\r\n\treturn (\r\n        <div className=\"addEntryButtons\"> \r\n            {dropDownButton}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WaterBlock;","import React from 'react';\r\n// import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport IzejvielasBlock from './RawMaterial/IzejvielasBlock';\r\nimport FixedCostBlock from './FixedCost/FixedCostBlock';\r\nimport WaterBlock from './Water/WaterBlock';\r\nimport PackageBlock from './Package/PackageBlock';\r\nimport WorkersBlock from './Workers/WorkersBlock';\r\nimport ElectricityBlock from './Electricity/ElectricityBlock';\r\n\r\n\r\n// import globalSettings from './globalSettings';\r\n\r\nimport {\r\n    useParams,\r\n\tuseHistory\r\n} from \"react-router-dom\";\r\n\r\n// const { ipcRenderer } = window.require(\"electron\");\r\n// const lodash = require('lodash');\r\n\r\nfunction GroupPage() {\r\n\t// We can use the `useParams` hook here to access\r\n\t// the dynamic pieces of the URL.\r\n\tlet { groupName } = useParams();\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<NavigationBar groupName={groupName} />\r\n            <h2>{\"Grupa: \" + groupName}</h2>\r\n\t\t\t<ElectricityBlock nosaukums={groupName} type={\"grupas\"}/>\r\n            <IzejvielasBlock nosaukums={groupName} type={\"grupas\"}/>\r\n            <FixedCostBlock nosaukums={groupName} type={\"grupas\"}/>\r\n\t\t\t<WaterBlock nosaukums={groupName} type={\"grupas\"}/>\r\n\t\t\t<PackageBlock nosaukums={groupName} type={\"grupas\"}/>\r\n\t\t\t<WorkersBlock nosaukums={groupName} type={\"grupas\"}/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nfunction NavigationBar(props) {\r\n\r\n\tlet history = useHistory();\r\n\r\n\tfunction handleClick(path, e) {\r\n\t\thistory.push(path);\r\n\t}\r\n\r\n\t// function handleAction(e) {\r\n\t// \t// Get the expense data from the group and save to objects\r\n\t// \tlet izejvielas, fiksetie, udens_sagatavosana, iepakojums, razosanas_grupas, elektriba = [];\r\n\t// \tlet expenseList = [\r\n\t// \t\t{ key:\"izejvielas\", value : izejvielas },\r\n\t// \t\t{ key:\"fiksētie\", value : fiksetie },\r\n\t// \t\t{ key:\"udens_sagatavosana\", value : udens_sagatavosana },\r\n\t// \t\t{ key:\"iepakojums\", value : iepakojums },\r\n\t// \t\t{ key:\"ražošanas_grupas\", value : razosanas_grupas },\r\n\t// \t\t{ key:\"elektriba\", value : elektriba }\r\n\t// \t]\r\n\r\n\t// \tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\t// \texpenseList.forEach(item => {\r\n\t// \t\t// Get the desired data\r\n\t// \t\titem[\"value\"]  = lodash\r\n\t// \t\t\t.chain(data)\r\n\t// \t\t\t.get(\"grupas\")\r\n\t// \t\t\t.find({nosaukums: props.groupName})\r\n\t// \t\t\t.get(item[\"key\"])\r\n\t// \t\t\t.value()\r\n\t// \t})\r\n\r\n\r\n\t// \t// Get product objects\r\n\t// \tlet productObjects = lodash\r\n\t// \t\t.chain(data)\r\n\t// \t\t.get(\"produkti\")\r\n\t// \t\t.value()\r\n\r\n\t// \t// For each product\r\n\t// \tproductObjects.forEach(product => {\r\n\t// \t\t// Ckeck whether in the group with name props.groupName \r\n\t// \t\tif (product[\"grupa\"] === props.groupName) {\r\n\t// \t\t\texpenseList.forEach(expense => {\r\n\r\n\t// \t\t\t\tlet keyTemp = expense[\"key\"]\r\n\t// \t\t\t\tlet valueTemp = expense[\"value\"]\t\r\n\r\n\t// \t\t\t\t// Modify data\r\n\t// \t\t\t\tproduct[keyTemp] = valueTemp\r\n\t// \t\t\t})\r\n\t// \t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t// \t\t}\r\n\t// \t})\t\r\n\t// }\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n\t\t\t\t<Container>\r\n\t\t\t\t<Navbar.Brand onClick={e => handleClick(\"/\")}>На главную</Navbar.Brand>\r\n\t\t\t\t\t{/* <Nav className=\"me-auto\">\r\n\t\t\t\t\t\t<NavDropdown\r\n\t\t\t\t\t\t\tid=\"nav-dropdown-dark-example\"\r\n\t\t\t\t\t\t\ttitle=\"Действия\"\r\n\t\t\t\t\t\t\tmenuVariant=\"dark\"\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<NavDropdown.Item onClick={(e) => handleAction(e)}>Присвоить значения всем товарам данной группы</NavDropdown.Item>\r\n\t\t\t\t\t\t</NavDropdown>\r\n\t\t\t\t\t</Nav> */}\r\n\t\t\t\t</Container>\r\n\t\t\t</Navbar>    \r\n\t\t</>\r\n\t)\r\n}\r\n\r\n\r\nexport default GroupPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './App.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\n\r\nfunction AddNewItemButton(props) {\r\n\r\n\tfunction handleCLick() {\r\n        ipcRenderer.send(props.message);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className=\"addEntryButtons\"> \r\n\t\t\t<Button variant=\"secondary\" size=\"sm\" id=\"addEntryButtons\" onClick={handleCLick}>\r\n\t\t\t\tДобавить\r\n\t\t\t</Button>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default AddNewItemButton;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport cellEditFactory from 'react-bootstrap-table2-editor';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\n\r\nimport AddNewItemButton from '../AddNewItemButton';\r\nimport NavBar from \"../NavBar/NavBar\"\r\nimport globalSettings from '../globalSettings';\r\nimport '../App.css';\r\n\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction RawMaterialAllPage() {\r\n\t// let headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Убрать\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n\t\t<h3 className=\"text-center\">Сырьё</h3>\r\n\t\t<AddNewItemButton message={\"raw-material:ask-for-window\"}/>\r\n\t\t{/* <RawMaterialTable/> */}\r\n\t\t{/* <GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<TableBody/>}\r\n\t\t/> */}\r\n\t\t<NewTable />\r\n\t</>\r\n\t);\r\n}\r\n\r\nfunction buttonFormatter(cell, row, rowIndex) {\r\n\treturn (\r\n\t\t<DeleteRawButton nosaukums={row.nosaukums} />\r\n\t);\r\n}\r\n\r\nconst cellEdit = cellEditFactory({\r\n  mode: 'dbclick',\r\n  blurToSave: true,\r\n  afterSaveCell: cenaUpdate\r\n});\r\n\r\n\r\nfunction NewTable(props) {\r\n\t// Get raw material data from main process\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tdata = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"izejvielas\")\r\n\t\t.value()\r\n\r\n\tconst { SearchBar } = Search;\r\n\r\n\tconst columns = [{\r\n\t\tdataField: 'kods',\r\n\t\ttext: 'Kods',\r\n\t\teditable: false,\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"80px\"}\r\n\t\t}, {\r\n\t\tdataField: 'nosaukums',\r\n\t\ttext: 'Nosaukums',\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\teditable: false\r\n\t\t}, {\r\n\t\tdataField: 'mervieniba',\r\n\t\ttext: 'Mērvieniba',\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"12%\" },\r\n\t\teditable: false\r\n\t\t}, {\r\n\t\tdataField: 'cena',\r\n\t\ttext: 'Cena',\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"200px\" },\r\n\t\tvalidator: (newValue, row, column) => {\r\n\t\t\tif (isNaN(newValue)) {\r\n\t\t\t  return {\r\n\t\t\t\tvalid: false,\r\n\t\t\t\tmessage: 'Введите число'\r\n\t\t\t  };\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t  }\r\n\t\t}, {\r\n\t\tdataField: '',\r\n\t\ttext: 'Убрать',\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"80px\" },\r\n\t\teditable: false,\r\n\t\tformatter: buttonFormatter\r\n\t}];\r\n\r\n\treturn (\r\n\t\t<ToolkitProvider\r\n\t\t\tkeyField='nosaukums' data={ data } columns={ columns } \r\n\t\t\tsearch\r\n\t\t>\r\n\r\n\t\t{\r\n\t\t\tprops => (\r\n\t\t\t<div>\r\n\t\t\t\t<h5>Поиск по названию:</h5>\r\n\t\t\t\t<SearchBar \r\n\t\t\t\t\t{ ...props.searchProps } \r\n\t\t\t\t\tclassName=\"custom-search-field\"\r\n\t\t\t\t\t// style={ { color: 'white' } }\r\n\t\t\t\t\t// delay={ 500 }\r\n\t\t\t\t\tplaceholder=\"Найти\"\r\n\t\t\t\t\tsrText=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<BootstrapTable\r\n\t\t\t\t\t{ ...props.baseProps }\r\n\t\t\t\t\tbootstrap4\r\n\t\t\t\t\tstriped\r\n\t\t\t\t\thover\r\n\t\t\t\t\tcondensed\r\n\t\t\t\t\tcellEdit={ cellEdit }\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\t</ToolkitProvider>\r\n\r\n\t)\r\n}\r\n\r\n// function TableBody(props) {\r\n//     // Get raw material data from main process\r\n// \tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n// \tdata = lodash\r\n// \t\t.chain(data)\r\n// \t\t.get(\"izejvielas\")\r\n// \t\t.value()\r\n\t\t\r\n//     // Create the list\r\n//     let itemList = [];\r\n\r\n//     data.forEach(item => {\r\n//         itemList.push(\r\n//             <tr key={item.nosaukums.toString()} >\r\n// \t\t\t\t<td>{item.kods}</td>\r\n//                 <td>{item.nosaukums}</td>\r\n// \t\t\t\t<td>{item.mervieniba}</td>\r\n//                 <td><Cena item={item}/></td>\r\n//                 <td>\r\n//                     <DeleteRawButton nosaukums={item.nosaukums} />\r\n//                 </td>\r\n//             </tr>\r\n//         );\r\n//     });\r\n\r\n//     return(\r\n// \t\t<>\r\n//         <tbody>\r\n//             {itemList}\r\n//         </tbody> \r\n// \t\t</>\r\n//     )\r\n// }\r\n\r\nfunction cenaUpdate(oldValue, newValue, row, column) {\r\n\tlet newCena = newValue\r\n\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tlodash\r\n\t\t.chain(data)\r\n\t\t.get(\"izejvielas\")\r\n\t\t.find({nosaukums: row.nosaukums})\r\n\t\t.assign({\"cena\" : parseFloat(newCena)})\r\n\t\t.value()\r\n\t\r\n\r\n\t// We need to update the value everythere i.e. in all groups and all products\r\n\t// which have this specific expense in the list\r\n\r\n\t// Get all products\r\n\tlet productObjects = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"produkti\")\r\n\t\t.value()\r\n\r\n\t// Get all grupas\r\n\tlet groupObjects = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"grupas\")\r\n\t\t.value()\r\n\r\n\tproductObjects.forEach(product => {\r\n\t\t// Get object\r\n\t\tlet izejvielasObj = lodash\r\n\t\t\t\t.chain(product)\r\n\t\t\t\t.get(\"izejvielas\")\r\n\t\t\t\t.find({nosaukums: row.nosaukums})\r\n\t\t\t\t.value()\r\n\t\t// If object exists\r\n\t\tif (izejvielasObj !== undefined) {\r\n\r\n\t\t\tlet newKopuma = newCena * izejvielasObj[\"daudzums\"]\r\n\r\n\t\t\tlodash\r\n\t\t\t\t.chain(izejvielasObj)\r\n\t\t\t\t.assign({\"cena\" : parseFloat(newCena)})\r\n\t\t\t\t.assign({\"kopuma\" : parseFloat(newKopuma)})\r\n\t\t\t\t.value()\r\n\t\t}\r\n\r\n\t})\r\n\r\n\tgroupObjects.forEach(group => {\r\n\t\tlet izejvielasObj = lodash\r\n\t\t\t.chain(group)\r\n\t\t\t.get(\"izejvielas\")\r\n\t\t\t.find({nosaukums: row.nosaukums})\r\n\t\t\t.value()\r\n\r\n\t\tif (izejvielasObj !== undefined) {\r\n\t\t\tlet newKopuma = newCena * izejvielasObj[\"daudzums\"]\r\n\r\n\t\t\tlodash\r\n\t\t\t\t.chain(izejvielasObj)\r\n\t\t\t\t.assign({\"cena\" : parseFloat(newCena)})\r\n\t\t\t\t.assign({\"kopuma\" : parseFloat(newKopuma)})\r\n\t\t\t\t.value()\r\n\r\n\t\t}\r\n\t})\r\n\r\n\t// Update data\r\n\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data), false ])\r\n}\r\n\r\n// function Cena(props) {\r\n// \tconst [cena, setCena] = useState(parseFloat(props.item.cena));\r\n// \tconst [validated, setValidated] = useState(false);\r\n\r\n// \tfunction handleChange(event) {\r\n//         setCena(event.target.value)\r\n//     }\r\n// \tfunction handleValidation(event) {\r\n//         const form = event.currentTarget;\r\n//         if (form.checkValidity() === false) {\r\n//             event.preventDefault();\r\n//             event.stopPropagation();\r\n//             setValidated(true);\r\n//         } else {\r\n//             setValidated(false);\r\n//             // Update the value\r\n\r\n// \t\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n//             lodash\r\n//                 .chain(data)\r\n//                 .get(\"izejvielas\")\r\n//                 .find({nosaukums: props.item.nosaukums})\r\n//                 .assign({\"cena\" : parseFloat(cena)})\r\n//                 .value()\r\n            \r\n\r\n// \t\t\t// We need to update the value everythere i.e. in all groups and all products\r\n// \t\t\t// which have this specific expense in the list\r\n\r\n// \t\t\t// Get all products\r\n// \t\t\tlet productObjects = lodash\r\n// \t\t\t\t.chain(data)\r\n// \t\t\t\t.get(\"produkti\")\r\n// \t\t\t\t.value()\r\n\r\n// \t\t\t// Get all grupas\r\n// \t\t\tlet groupObjects = lodash\r\n// \t\t\t\t.chain(data)\r\n// \t\t\t\t.get(\"grupas\")\r\n// \t\t\t\t.value()\r\n\r\n// \t\t\tproductObjects.forEach(product => {\r\n// \t\t\t\t// Get object\r\n// \t\t\t\tlet izejvielasObj = lodash\r\n// \t\t\t\t\t\t.chain(product)\r\n// \t\t\t\t\t\t.get(\"izejvielas\")\r\n// \t\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n// \t\t\t\t\t\t.value()\r\n// \t\t\t\t// If object exists\r\n// \t\t\t\tif (izejvielasObj !== undefined) {\r\n\r\n// \t\t\t\t\tlet newKopuma = cena * izejvielasObj[\"daudzums\"]\r\n\r\n// \t\t\t\t\tlodash\r\n// \t\t\t\t\t\t.chain(izejvielasObj)\r\n// \t\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n// \t\t\t\t\t\t.assign({\"kopuma\" : parseFloat(newKopuma)})\r\n// \t\t\t\t\t\t.value()\r\n// \t\t\t\t}\r\n\r\n// \t\t\t})\r\n\r\n// \t\t\tgroupObjects.forEach(group => {\r\n// \t\t\t\tlet izejvielasObj = lodash\r\n// \t\t\t\t\t.chain(group)\r\n// \t\t\t\t\t.get(\"izejvielas\")\r\n// \t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n// \t\t\t\t\t.value()\r\n\r\n// \t\t\t\tif (izejvielasObj !== undefined) {\r\n// \t\t\t\t\tlet newKopuma = cena * izejvielasObj[\"daudzums\"]\r\n\r\n// \t\t\t\t\tlodash\r\n// \t\t\t\t\t\t.chain(izejvielasObj)\r\n// \t\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n// \t\t\t\t\t\t.assign({\"kopuma\" : parseFloat(newKopuma)})\r\n// \t\t\t\t\t\t.value()\r\n\r\n// \t\t\t\t}\r\n// \t\t\t})\r\n\r\n// \t\t\t// Update data\r\n// \t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data), false])\r\n\r\n//         }\r\n//     }\r\n// \treturn (\r\n// \t\t<Form noValidate validated={validated}>\r\n// \t\t\t<Form.Group>\r\n// \t\t\t\t<Form.Control type=\"number\" required \r\n// \t\t\t\t\tplaceholder=\"Цена\" \r\n// \t\t\t\t\tvalue={cena} \r\n// \t\t\t\t\tonChange={handleChange}\r\n// \t\t\t\t\tonBlur={handleValidation}\r\n// \t\t\t\t/>\r\n// \t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n// \t\t\t\t\tВведите цену\r\n// \t\t\t\t</Form.Control.Feedback>\r\n// \t\t\t</Form.Group>  \r\n// \t\t</Form>\r\n// \t)\r\n// }\r\n\r\n// function NavigationBar() {\r\n\r\n// \tlet history = useHistory();\r\n\r\n// \tfunction handleClickMainPage() {\r\n// \t\thistory.push(\"/\");\r\n// \t}\r\n//   return (\r\n// \t<>\r\n// \t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n// \t\t\t<Container>\r\n// \t\t\t<Navbar.Brand onClick={handleClickMainPage}>На главную</Navbar.Brand>\r\n// \t\t\t\t<Nav className=\"me-auto\">\r\n// \t\t\t\t</Nav>\r\n// \t\t\t</Container>\r\n// \t\t</Navbar>    \r\n// \t</>\r\n//   )\r\n// }\r\n\r\nfunction DeleteRawButton(props) {\r\n\tfunction handleClick() {\r\n\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\t\t\r\n\t\tipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n\t\t\tlodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"izejvielas\")\r\n\t\t\t\t.remove({nosaukums: props.nosaukums})\r\n\t\t\t\t.value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t\t\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={handleClick}>удалить</Button>\r\n\t)\r\n}\r\n\r\nexport default RawMaterialAllPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nclass RawMaterialAddPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kods: '',\r\n            nosaukums: '',\r\n            mervieniba: '',\r\n            cena: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n  \r\n        this.handleKodsChange = this.handleKodsChange.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleMervienibaChange = this.handleMervienibaChange.bind(this);\r\n        this.handlePriceChange = this.handlePriceChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n  \r\n    handleKodsChange(event) {\r\n        this.setState({kods: event.target.value});\r\n    }\r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n    handleMervienibaChange(event) {\r\n        console.log(event.target.value)\r\n        this.setState({mervieniba: event.target.value});\r\n    }\r\n    handlePriceChange(event) {\r\n        this.setState({cena: event.target.value});\r\n    }\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                kods={this.state.kods}\r\n                nosaukums={this.state.nosaukums}\r\n                mervieniba={this.state.mervieniba}\r\n                cena={this.state.cena}\r\n\r\n                handleKodsChange={this.handleKodsChange}\r\n                handleMervienibaChange={this.handleMervienibaChange}\r\n                handleNameChange={this.handleNameChange} \r\n                handlePriceChange={this.handlePriceChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}   \r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // Check the input correctness\r\n        // Get raw material data from main process\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(\"izejvielas\")\r\n            .value()\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\" || this.props.cena === \"\" || this.props.kods === \"\" || this.props.mervieniba === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if kods already exists\r\n            let element = this.data.find(element => parseInt(element.kods) === parseInt(this.props.kods));\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Код \"${this.props.kods}\" уже существует`);\r\n            } else {\r\n                // Check if element already exists\r\n                element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n                if (typeof(element) != \"undefined\") {\r\n                    this.props.setShowAlert(true)\r\n                    this.props.setAlertMessage(`Сырье с названием \"${this.props.nosaukums}\" уже существует`);\r\n                // Check if price is written correctly\r\n                } else if (!isNumeric(this.props.cena)) {\r\n                    this.props.setShowAlert(true)\r\n                    this.props.setAlertMessage(`Цена введена в неправильном формате`);\r\n                } else if (!isNumeric(this.props.kods)) {\r\n                    this.props.setShowAlert(true)\r\n                    this.props.setAlertMessage(`Код введен в неправильном формате`);\r\n                } else {\r\n                    let paramObj = \r\n                        { \r\n                            \"kods\": parseInt(this.props.kods), \r\n                            \"nosaukums\": this.props.nosaukums, \r\n                            \"mervieniba\": this.props.mervieniba, \r\n                            \"cena\": parseFloat(this.props.cena)\r\n                        }\r\n\r\n                    let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                    lodash\r\n                        .chain(tempData)\r\n                        .get(\"izejvielas\")\r\n                        .push(paramObj)\r\n                        .value()\r\n                    ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n                }\r\n\r\n            }\r\n\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Код Сырья</Form.Label>\r\n                    <Form.Control placeholder=\"Код\" value={this.props.kods} onChange={this.props.handleKodsChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название Сырья</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Mērvienība</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" value={this.props.mervieniba} onChange={this.props.handleMervienibaChange}>\r\n                        <option value=\"\">Mērvienība</option>\r\n                        <option value=\"kg\">kg</option>\r\n                        <option value=\"gab\">gab</option>\r\n                        <option value=\"l\">l</option>\r\n                    </Form.Select>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPrice\">\r\n                    <Form.Label>Цена</Form.Label>\r\n                    <Form.Control placeholder=\"Цена\" value={this.props.cena} onChange={this.props.handlePriceChange} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RawMaterialAddPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nclass FixedCostAllAddPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nosaukums: '',\r\n            cena: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n  \r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handlePriceChange = this.handlePriceChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n  \r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n    handlePriceChange(event) {\r\n        this.setState({cena: event.target.value});\r\n    }\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                nosaukums={this.state.nosaukums}\r\n                cena={this.state.cena}\r\n\r\n                handleNameChange={this.handleNameChange} \r\n                handlePriceChange={this.handlePriceChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}   \r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // Check the input correctness\r\n        // Get raw material data from main process\r\n\t\t// this.data = ipcRenderer.sendSync('get', [\r\n        //     [],\r\n        //     [],\r\n        //     \"/../data/raw-material-all.json\"\r\n        // ]);\r\n\t\t// this.data = JSON.parse(this.data)\r\n\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(\"fiksētie\")\r\n            .value()\r\n\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\" || this.props.cena === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if element already exists\r\n            let element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Фиксированная затрата с названием \"${this.props.nosaukums}\" уже существует`);\r\n            // Check if price is written correctly\r\n            } else if (!isNumeric(this.props.cena)) {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Цена введена в неправильном формате`);\r\n            } else {\r\n                let paramObj = \r\n                    { \"nosaukums\": this.props.nosaukums, \"cena\": parseFloat(this.props.cena)}\r\n                // Send the values to main process\r\n                let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                lodash\r\n                    .chain(tempData)\r\n                    .get(\"fiksētie\")\r\n                    .push(paramObj)\r\n                    .value()\r\n                ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название Фиксированной Затраты</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPrice\">\r\n                    <Form.Label>Стоимость</Form.Label>\r\n                    <Form.Control placeholder=\"Цена\" value={this.props.cena} onChange={this.props.handlePriceChange} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default FixedCostAllAddPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport NavBar from \"../NavBar/NavBar\"\r\nimport globalSettings from '../globalSettings';\r\n\r\nimport '../App.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction FixedCostAllPage() {\r\n\tlet headerNames = [\"Nosaukums\", \"Eur\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n\t\t{/* <RawMaterialTable/> */}\r\n\t\t<h3 className=\"text-center\">Фиксированные затраты</h3>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<TableBody/>}\r\n\t\t/>\r\n\t</>\r\n\t);\r\n}\r\n\r\n\r\nfunction TableBody() {\r\n    // Get fixed costs data from main process\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tlet fixedGeneral = lodash\r\n        .chain(data)\r\n        .get(\"fiksētie\")\r\n        .value()\r\n\r\n    const [daudzums, setDaudzums] = useState(fixedGeneral[\"vien_daudzums\"]);\r\n    const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    function daudzumsHandleChange(event) {\r\n        setDaudzums(event.target.value)\r\n    };\r\n\r\n    function daudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setDaudzumsValidated(true);\r\n        } else {\r\n            setDaudzumsValidated(false);\r\n            // Update the value\r\n            fixedGeneral[\"vien_daudzums\"] = parseFloat(daudzums)\r\n            fixedGeneral[\"vien_summa\"] = fixedGeneral[\"summa\"] / fixedGeneral[\"vien_daudzums\"] \r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(fixedGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-4 text-end\">Единиц произведенно:</td>\r\n                    <td>\r\n                        <Form noValidate validated={daudzumsValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={daudzums} \r\n                                    onChange={daudzumsHandleChange}\r\n                                    onBlur={daudzumsHandleValidation}\r\n                                    style={{ width: '200px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <Elements elementi={fixedGeneral[\"elementi\"]}/>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Сумма всех фиксированных:</td>\r\n                    <td>{fixedGeneral[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n                <tr className=\"align-middle \">\r\n                    <td className=\"text-end\">Цена/ед:</td>\r\n                    <td>{fixedGeneral[\"vien_summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction Elements(props) {\r\n    let elementi = props.elementi\r\n    let list = []\r\n\r\n    elementi.forEach((item) => {\r\n        list.push(<Element key={item.nosaukums}  item={item}/>)\r\n    })\r\n    return list\r\n}\r\n\r\nfunction Element(props) {\r\n    let item = props.item\r\n\r\n    const [summa, setSumma] = useState(parseFloat(item[\"value\"]));\r\n\tconst [summaValidated, setSummaValidated] = useState(false);\r\n\r\n    function summaHandleChange(event) {\r\n        setSumma(event.target.value)\r\n    }\r\n\r\n    function summaHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setSummaValidated(true);\r\n        } else {\r\n            setSummaValidated(false);\r\n\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            let fixedGeneral = lodash\r\n                .chain(data)\r\n                .get(\"fiksētie\")\r\n                .value()\r\n\r\n            let fixedElement = lodash\r\n                .chain(fixedGeneral)\r\n                .get(\"elementi\")\r\n                .find({\"nosaukums\" : item[\"nosaukums\"]})\r\n                .value()\r\n\r\n            // Update the value\r\n            fixedElement[\"value\"] = parseFloat(summa)\r\n\r\n            let fixedElementi = fixedGeneral[\"elementi\"]\r\n            let total = parseFloat(0);\r\n\r\n            fixedElementi.forEach(item => {\r\n                total += item[\"value\"]\r\n            })\r\n\r\n            fixedGeneral[\"summa\"] = parseFloat(total)\r\n            fixedGeneral[\"vien_summa\"] = fixedGeneral[\"summa\"] / fixedGeneral[\"vien_daudzums\"] \r\n\r\n            console.log(fixedGeneral[\"vien_summa\"])\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(fixedGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n    return (\r\n        <tr className=\"align-middle\">\r\n            <td className=\"text-end\">{item[\"nosaukums\"] + \":\"}</td>\r\n            <td>\r\n                <Form noValidate validated={summaValidated}>\r\n                    <Form.Group>\r\n                        <Form.Control type=\"number\" required \r\n                            placeholder=\"Кол-во\" \r\n                            value={summa} \r\n                            onChange={summaHandleChange}\r\n                            onBlur={summaHandleValidation}\r\n                            style={{ width: '200px', height: '30px' }}\r\n                        />\r\n                        <Form.Control.Feedback type=\"invalid\">\r\n                            Введите количество\r\n                        </Form.Control.Feedback>\r\n                    </Form.Group>  \r\n                </Form>    \r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction productUpdate(vien_summa) {\r\n    let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    // Price per each product must be updated for each product\r\n    let productObjects = lodash\r\n        .chain(tempData)\r\n        .get(\"produkti\")\r\n        .value()\r\n\r\n    productObjects.forEach(product => {\r\n        let fixedObj = product[\"fiksētie\"]\r\n        fixedObj[\"vien_summa\"] = vien_summa\r\n        fixedObj[\"summa\"] = fixedObj[\"vien_summa\"] * fixedObj[\"vien_daudzums\"]\r\n    })\r\n\r\n    // Update data\r\n    ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n}\r\n\r\nexport default FixedCostAllPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nclass WaterAllAddPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nosaukums: '',\r\n            cena: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n  \r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handlePriceChange = this.handlePriceChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n  \r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n    handlePriceChange(event) {\r\n        this.setState({cena: event.target.value});\r\n    }\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                nosaukums={this.state.nosaukums}\r\n                cena={this.state.cena}\r\n\r\n                handleNameChange={this.handleNameChange} \r\n                handlePriceChange={this.handlePriceChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}   \r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // Check the input correctness\r\n        // Get raw material data from main process\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(\"udens_sagatavosana\")\r\n            .value()\r\n\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\" || this.props.cena === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if element already exists\r\n            let element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Водоподготовка с названием \"${this.props.nosaukums}\" уже существует`);\r\n            // Check if price is written correctly\r\n            } else if (!isNumeric(this.props.cena)) {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Цена введена в неправильном формате`);\r\n            } else {\r\n                let paramObj = { \"nosaukums\": this.props.nosaukums, \"cena\": parseFloat(this.props.cena)}\r\n                // Send the values to main process\r\n\r\n                // let temp = ipcRenderer.sendSync('modify',  [\r\n                //     \"add\", \r\n                //     [], \r\n                //     [], \r\n                //     '/../data/water-all.json', \r\n                //     JSON.stringify(paramObj)\r\n                // ]);\r\n\r\n                this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                \r\n                lodash\r\n                    .chain(this.data)\r\n                    .get(\"udens_sagatavosana\")\r\n                    .push(paramObj)\r\n                    .value()\r\n\r\n                ipcRenderer.sendSync('modify-data', [ JSON.stringify(this.data) ])\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название водоподготовки</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPrice\">\r\n                    <Form.Label>Цена за килограмм</Form.Label>\r\n                    <Form.Control placeholder=\"Цена\" value={this.props.cena} onChange={this.props.handlePriceChange} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WaterAllAddPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import Container from 'react-bootstrap/Container';\r\n// import Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport AddNewItemButton from '../AddNewItemButton';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport NavBar from \"../NavBar/NavBar\"\r\n\r\nimport '../App.css';\r\n\r\n// import {\r\n//     useHistory\r\n// } from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction WaterAllPage() {\r\n\tlet headerNames = [\"Nosaukums\", \"Eur/vien\", \"\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n\t\t<h3 className=\"text-center\">Водоподготовка</h3>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<TableBody/>}\r\n\t\t/>\r\n\t\t<AddNewItemButton message={\"water:ask-for-window\"}/>\r\n\t</>\r\n\t);\r\n}\r\n\r\nfunction TableBody(props) {\r\n    // Get raw material data from main process\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tdata = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"udens_sagatavosana\")\r\n\t\t.value()\r\n\r\n    // Create the list\r\n    let itemList = [];\r\n\r\n    data.forEach(item => {\r\n        itemList.push(\r\n            <tr key={item.nosaukums.toString()} >\r\n                <td >{item.nosaukums}</td>\r\n                <td><Cena item={item}/></td>\r\n                <td>\r\n                    <DeleteButton nosaukums={item.nosaukums} />\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return(\r\n\t\t<>\r\n        <tbody>\r\n            {itemList}\r\n        </tbody> \r\n\t\t</>\r\n    )\r\n}\r\n\r\nfunction Cena(props) {\r\n\tconst [cena, setCena] = useState(parseFloat(props.item.cena));\r\n\tconst [validated, setValidated] = useState(false);\r\n\r\n\tfunction handleChange(event) {\r\n        setCena(event.target.value)\r\n    }\r\n\tfunction handleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setValidated(true);\r\n        } else {\r\n            setValidated(false);\r\n            // Update the value\r\n\t\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(\"udens_sagatavosana\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"cena\" : parseFloat(cena)})\r\n                .value()\r\n            \r\n\t\t\t// We need to update the value everythere i.e. in all groups and all products\r\n\t\t\t// which have this specific expense in the list\r\n\r\n\t\t\t// Get all products\r\n\t\t\tlet productObjects = lodash\r\n\t\t\t.chain(data)\r\n\t\t\t.get(\"produkti\")\r\n\t\t\t.value()\r\n\r\n\t\t\t// Get all grupas\r\n\t\t\tlet groupObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"grupas\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\tproductObjects.forEach(product => {\r\n\t\t\t\tlodash\r\n\t\t\t\t\t.chain(product)\r\n\t\t\t\t\t.get(\"udens_sagatavosana\")\r\n\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n\t\t\t\t\t.value()\r\n\t\t\t})\r\n\r\n\t\t\tgroupObjects.forEach(group => {\r\n\t\t\t\tlodash\r\n\t\t\t\t\t.chain(group)\r\n\t\t\t\t\t.get(\"udens_sagatavosana\")\r\n\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n\t\t\t\t\t.value()\r\n\t\t\t})\r\n\r\n\t\t\t// Update data\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n    }\r\n\treturn (\r\n\t\t<Form noValidate validated={validated}>\r\n\t\t\t<Form.Group>\r\n\t\t\t\t<Form.Control type=\"number\" required \r\n\t\t\t\t\tplaceholder=\"Цена\" \r\n\t\t\t\t\tvalue={cena} \r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tonBlur={handleValidation}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n\t\t\t\t\tВведите цену\r\n\t\t\t\t</Form.Control.Feedback>\r\n\t\t\t</Form.Group>  \r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\n// function NavigationBar() {\r\n\r\n// \tlet history = useHistory();\r\n\r\n// \tfunction handleClickMainPage() {\r\n// \t\thistory.push(\"/\");\r\n// \t}\r\n//   return (\r\n// \t<>\r\n// \t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n// \t\t\t<Container>\r\n// \t\t\t<Navbar.Brand onClick={handleClickMainPage}>На главную</Navbar.Brand>\r\n// \t\t\t\t<Nav className=\"me-auto\">\r\n// \t\t\t\t</Nav>\r\n// \t\t\t</Container>\r\n// \t\t</Navbar>    \r\n// \t</>\r\n//   )\r\n// }\r\n\r\n\r\nfunction DeleteButton(props) {\r\n\tfunction handleClick() {\r\n\r\n\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n\t\tipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n\t\t\tlodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"udens_sagatavosana\")\r\n\t\t\t\t.remove({nosaukums: props.nosaukums})\r\n\t\t\t\t.value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={handleClick}>удалить</Button>\r\n\t)\r\n}\r\n\r\nexport default WaterAllPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport './App.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport GeneralizedTable from './GeneralizedTable';\r\n\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\r\nimport globalSettings from './globalSettings';\r\n\r\nimport {\r\n\tuseParams,\r\n} from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nlet info = \"\"\r\nlet destinationEntryName = \"\"\r\n\r\nfunction AddExpensesPage() {\r\n\r\n\tlet { destinationEntryNameTemp, infoTemp } = useParams();\r\n\r\n    destinationEntryName = destinationEntryNameTemp\r\n    info = JSON.parse(infoTemp)\r\n\r\n    let expenses = \"\"\r\n    let headerNames = \"\"\r\n\r\n    switch(info[\"from\"]) {\r\n        case \"izejvielas\":\r\n            headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Добавить\"]\r\n            break\r\n        case \"fiksētie\":\r\n            headerNames = [\"Nosaukums\", \"Cena\", \"Добавить\"]\r\n            break\r\n        case \"udens_sagatavosana\":\r\n            headerNames = [\"Nosaukums\", \"Cena\", \"Добавить\"]\r\n            break\r\n        case \"iepakojums\":\r\n            headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Добавить\"]\r\n            break\r\n        case \"darbinieki\":\r\n            headerNames = [\"Nosaukums\", \"Alga\", \"Alga ar nodokļi\", \"Добавить\"]\r\n            break\r\n        case \"ražošanas_grupas\":\r\n            headerNames = [\"Nosaukums\", \"Добавить\"]\r\n            break\r\n        default:\r\n            headerNames = [\"Nosaukums\", \"Добавить\"]\r\n    }\r\n\r\n\r\n    if (info[\"type\"] === \"all\") {\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        expenses = lodash\r\n            .chain(data)\r\n            .get(info[\"from\"])\r\n            .value()\r\n\r\n    } else if (info[\"type\"] === \"group\") {\r\n        let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        let groupName = lodash\r\n            .chain(data)\r\n            .get(\"produkti\")\r\n            .find({nosaukums: destinationEntryName})\r\n            .get(\"grupa\")\r\n            .value()\r\n\r\n        // Get the desired data\r\n        if (info[\"from\"] === \"iepakojums\") {\r\n            expenses = lodash\r\n                .chain(data)\r\n                .get(\"grupas\")\r\n                .find({nosaukums: groupName})\r\n                .get(\"iepakojums\")\r\n                .get(\"elementi\")\r\n                .value()\r\n\r\n        } else {\r\n            expenses = lodash\r\n                .chain(data)\r\n                .get(\"grupas\")\r\n                .find({nosaukums: groupName})\r\n                .get(info[\"from\"])\r\n                .value() \r\n        }\r\n    }\r\n\r\n\treturn(\r\n\t\t<AddExpensesPagePageClass \r\n            destinationEntryName={destinationEntryName} \r\n            expenses={expenses}\r\n            headerNames={headerNames}\r\n            info={info}/>\r\n\t)\r\n}\r\n\r\nclass AddExpensesPagePageClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n\t\tthis.entryName = props.entryName\r\n\t\tthis.expenses = props.expenses\r\n\r\n\t\tthis.setShowAlert = this.setShowAlert.bind(this);\r\n\t\tthis.setAlertMessage = this.setAlertMessage.bind(this);\r\n    }\r\n\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<AddAlert \r\n                    showAlert={this.state.showAlert} \r\n                    alertMessage={this.state.alertMessage} \r\n                    onClose={() => this.setShowAlert(false)}\r\n                />\r\n\t\t\t\t<ExpenseTable \r\n                    setShowAlert={this.setShowAlert}\r\n                    setAlertMessage={this.setAlertMessage}\r\n                    {...this.props}\r\n                />\r\n\t\t\t</>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction AddAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" className=\"alert-fixed\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\n\r\nfunction ExpenseTable(props) {\r\n\r\n    if (props.info[\"from\"] === \"izejvielas\") {\r\n        return (\r\n            <>\r\n                <TableTitle/>\r\n                <IzejvielaTable {...props}/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <TableTitle/>\r\n            <GeneralizedTable \r\n                headerNames={props.headerNames}\r\n                tableBody=\r\n                {<ExpenseTableBody \r\n                    {...props}\r\n                />}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nfunction buttonFormatter(cell, row, rowIndex, formatExtraData) {\r\n\r\n    console.log(formatExtraData.props)\r\n\treturn (\r\n\t\t// <DeleteRawButton nosaukums={row.nosaukums} />\r\n        <AddExpenseButton \r\n            setAlertMessage={formatExtraData.props.setAlertMessage}\r\n            setShowAlert={formatExtraData.props.setShowAlert}\r\n            row={row}\r\n        />\r\n\t);\r\n}\r\n\r\nfunction IzejvielaTable(props) {\r\n\r\n\tconst { SearchBar } = Search;\r\n\r\n\tconst columns = [{\r\n\t\tdataField: 'kods',\r\n\t\ttext: 'Kods',\r\n\t\teditable: false,\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"80px\"}\r\n\t\t}, {\r\n\t\tdataField: 'nosaukums',\r\n\t\ttext: 'Nosaukums',\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\teditable: false\r\n\t\t}, {\r\n\t\tdataField: 'mervieniba',\r\n\t\ttext: 'Mērvieniba',\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"12%\" },\r\n\t\teditable: false\r\n\t\t}, {\r\n\t\tdataField: 'cena',\r\n\t\ttext: 'Cena',\r\n\t\tsort: true,\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"200px\" }, \r\n\t\teditable: false\r\n        }, {\r\n\t\tdataField: '',\r\n\t\ttext: 'Убрать',\r\n\t\theaderAlign: 'center',\r\n\t\theaderStyle:  { width: \"80px\" },\r\n\t\teditable: false,\r\n\t\tformatter: buttonFormatter,\r\n        formatExtraData: {\r\n            props : props\r\n        }\r\n\t}];\r\n\r\n\treturn (\r\n\t\t<ToolkitProvider\r\n\t\t\tkeyField='nosaukums' data={ props.expenses } columns={ columns } \r\n\t\t\tsearch\r\n\t\t>\r\n\r\n\t\t{\r\n\t\t\tprops => (\r\n\t\t\t<div>\r\n\t\t\t\t<h5>Поиск по названию:</h5>\r\n\t\t\t\t<SearchBar \r\n\t\t\t\t\t{ ...props.searchProps } \r\n\t\t\t\t\tclassName=\"custom-search-field\"\r\n\t\t\t\t\tplaceholder=\"Найти\"\r\n\t\t\t\t\tsrText=\"\"\r\n\t\t\t\t/>\r\n\t\t\t\t<hr />\r\n\t\t\t\t<BootstrapTable\r\n\t\t\t\t\t{ ...props.baseProps }\r\n\t\t\t\t\tbootstrap4\r\n\t\t\t\t\tstriped\r\n\t\t\t\t\thover\r\n\t\t\t\t\tcondensed\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t\t</ToolkitProvider>\r\n\r\n\t)\r\n\r\n}\r\n\r\nfunction TableTitle() {\r\n    let title\r\n    switch(info[\"from\"]) {\r\n        case \"izejvielas\":\r\n            title = \"Сырьё\"\r\n            break\r\n        case \"fiksētie\":\r\n            title = \"Фиксированные\"\r\n            break\r\n        case \"udens_sagatavosana\":\r\n            title = \"Водоподготовка\"\r\n            break\r\n        case \"iepakojums\":\r\n            title = \"Упаковка\"\r\n            break\r\n        case \"darbinieki\":\r\n            title = \"Работники\"\r\n            break\r\n        case \"ražošanas_grupas\":\r\n            title = \"Группы производств\"\r\n            break\r\n        default:\r\n            throw new Error('Unknown \"from\" entry');\r\n            \r\n    }\r\n\r\n    return (\r\n        <h2>{title}</h2>\r\n    )\r\n}\r\n\r\n\r\nfunction ExpenseTableBody(props) {\r\n    let componentList = [];\r\n    let component;\r\n    switch(info[\"from\"]) {\r\n        case \"izejvielas\":\r\n            component = <IzejvielaEntry {...props} />\r\n            break\r\n        case \"fiksētie\":\r\n            component = <FixedEntry {...props} />\r\n            break\r\n        case \"udens_sagatavosana\":\r\n            component = <WaterEntry {...props} />\r\n            break\r\n        case \"iepakojums\":\r\n            component = <PackageEntry {...props} />\r\n            break\r\n        case \"darbinieki\":\r\n            component = <WorkersEntry {...props} />\r\n            break\r\n        case \"ražošanas_grupas\":\r\n            component = <RazGrupasEntry {...props} />\r\n            break\r\n        default:\r\n            throw new Error('Unknown \"from\" entry');\r\n    }\r\n    // Make the list of components\r\n    props.expenses.forEach((item) => {\r\n        componentList.push(React.cloneElement(component, {item: item}))\r\n    })\r\n    return (\r\n        <tbody>\r\n            {componentList}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nfunction IzejvielaEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.kods}</td>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.mervieniba}</td>\r\n            <td>{props.item.cena}</td>\r\n\t\t\t<td><AddExpenseButton {...props}/></td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction FixedEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.cena}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<AddExpenseButton \r\n                    {...props}\r\n                />\r\n\t\t\t</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction WaterEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.cena}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<AddExpenseButton \r\n                    {...props}\r\n                />\r\n\t\t\t</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction PackageEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.kods}</td>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.mervieniba}</td>\r\n            <td>{props.item.cena}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<AddExpenseButton \r\n                    {...props}\r\n                />\r\n\t\t\t</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction WorkersEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.nosaukums}</td>\r\n            <td>{props.item.alga.toFixed(globalSettings[\"floatPrecisionThird\"])}</td>\r\n            <td>{props.item.alga_nodoklis.toFixed(globalSettings[\"floatPrecisionThird\"])}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<AddExpenseButton \r\n                    {...props}\r\n                />\r\n\t\t\t</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction RazGrupasEntry(props) {\r\n    return (\r\n        <tr>\r\n            <td>{props.item.nosaukums}</td>\r\n\t\t\t<td>\r\n\t\t\t\t<AddExpenseButton \r\n                    {...props}\r\n                />\r\n\t\t\t</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nfunction AddExpenseButton(props) {\r\n\tfunction handleClick() {\r\n        let ObjAdd = {};\r\n\r\n        // Need to populate the entries with default data if \r\n        // the data is taken from the general list\r\n        if (info[\"type\"] === \"all\") {\r\n            switch(info[\"from\"]) {\r\n                case \"izejvielas\":\r\n                    ObjAdd = { \r\n                        \"kods\": props.row.kods, \r\n                        \"nosaukums\": props.row.nosaukums, \r\n                        \"mervieniba\": props.row.mervieniba, \r\n                        \"cena\": props.row.cena, \r\n                        \"daudzums\": 1, \r\n                        \"kopuma\": props.row.cena \r\n                    }\r\n                    break\r\n                case \"fiksētie\":\r\n                    ObjAdd = { \"nosaukums\": props.item.nosaukums, \"cena\":props.item.cena}\r\n                    break\r\n                case \"udens_sagatavosana\":\r\n                    ObjAdd = { \"nosaukums\": props.item.nosaukums, \"cena\": props.item.cena}\r\n        \r\n                    break\r\n                case \"iepakojums\":\r\n                    ObjAdd = { \r\n                        \"kods\":props.item.kods, \r\n                        \"nosaukums\": props.item.nosaukums, \r\n                        \"mervieniba\": props.item.mervieniba, \r\n                        \"cena\": props.item.cena, \r\n                        \"norma\": 1, \r\n                        \"summa_iepak\": props.item.cena,  \r\n                        \"summa_vien\": props.item.cena\r\n                    }\r\n                    break\r\n                case \"darbinieki\":\r\n                    let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                    let daudzums = lodash\r\n                        .chain(data)\r\n                        .get(info[\"to\"])\r\n                        .find({nosaukums: destinationEntryName})\r\n                        .get(\"ražošanas_grupas\")\r\n                        .find({nosaukums: info[\"raz_grupas_nosaukums\"]})\r\n                        .get(\"daudzums\")\r\n                        .value()\r\n                        \r\n                    ObjAdd = { \r\n                        \"nosaukums\": props.item.nosaukums, \r\n                        \"alga\": props.item.alga, \r\n                        \"alga_nodoklis\": props.item.alga_nodoklis, \r\n                        \"norma\": 1, \r\n                        \"summa\": props.item.alga_nodoklis,\r\n                        \"summa_vien\": props.item.alga_nodoklis / daudzums\r\n                    }\r\n                    break\r\n                default:\r\n                    throw new Error('Unknown \"from\" entry');\r\n            }\r\n\r\n        } else if (info[\"type\"] === \"group\") {\r\n            ObjAdd = props.item\r\n        }\r\n\r\n        let data = addExpenseToFile(destinationEntryName)\r\n\r\n        function addExpenseToFile(destinationEntryName) {\r\n            let data;\r\n            if (info[\"from\"] === \"iepakojums\") {\r\n                let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                let array = lodash\r\n                    .chain(data)\r\n                    .get(info[\"to\"])\r\n                    .find({nosaukums: destinationEntryName})\r\n                    .get(\"iepakojums\")\r\n                    .get(\"elementi\")\r\n\r\n                if (array.find({nosaukums : ObjAdd.nosaukums}).value() === undefined) {\r\n                    // Add the object to array\r\n                    array.push(ObjAdd).value()\r\n                    ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n                } else {\r\n                    return \"Already in the list\"\r\n                }\r\n\r\n                \r\n            } else if (info[\"from\"] === \"darbinieki\") {\r\n\r\n                let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                let array = lodash\r\n                    .chain(data)\r\n                    .get(info[\"to\"])\r\n                    .find({nosaukums: destinationEntryName})\r\n                    .get(\"ražošanas_grupas\")\r\n                    .find({nosaukums: info[\"raz_grupas_nosaukums\"]})\r\n                    .get(\"darbinieki\")\r\n\r\n                if (array.find({nosaukums : ObjAdd.nosaukums}).value() === undefined) {\r\n                    // Add the object to array\r\n                    array.push(ObjAdd).value()\r\n                    ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n                } else {\r\n                    return \"Already in the list\"\r\n                }\r\n            } else {\r\n                data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                let array = lodash\r\n                    .chain(data)\r\n                    .get(info[\"to\"])\r\n                    .find({nosaukums: destinationEntryName})\r\n                    .get(info[\"from\"])\r\n\r\n                // If object is not in the list\r\n                if (array.find({nosaukums : ObjAdd.nosaukums}).value() === undefined) {\r\n                    // Add the object to array\r\n                    array.push(ObjAdd).value()\r\n                    ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n                } else {\r\n                    return \"Already in the list\"\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n\t\tif (data === \"Already in the list\") {\r\n            let message = \"\"\r\n            switch(info[\"from\"]) {\r\n                case \"izejvielas\":\r\n                    message = 'Сырье \"' + props.row.nosaukums + '\" уже в списке';\r\n                    break\r\n                case \"fiksētie\":\r\n                    message = 'Фиксированная затрата \"' + props.item.nosaukums + '\" уже в списке';\r\n                    break\r\n                case \"udens_sagatavosana\":\r\n                    message = 'Водоподготовка \"' + props.item.nosaukums + '\" уже в списке';\r\n                    break\r\n                case \"iepakojums\":\r\n                    message = 'Упаковка \"' + props.item.nosaukums + '\" уже в списке';\r\n                    break\r\n                case \"darbinieki\":\r\n                    message = 'Работник \"' + props.item.nosaukums + '\" уже в списке';\r\n                    break\r\n                case \"ražošanas_grupas\":\r\n                    message = 'Группа производства \"' + props.item.nosaukums + '\" уже в списке';\r\n                    break\r\n                default:\r\n                    throw new Error('Unknown \"from\" entry');\r\n            }\r\n            props.setAlertMessage(message)\r\n            props.setShowAlert(true)\r\n\t\t} \r\n\t}\r\n\r\n\treturn (\r\n\t\t<Button variant=\"success\" type=\"button\" size=\"sm\" onClick={handleClick}>\r\n\t\t\tДобавить\r\n\t\t</Button>\r\n\t)\r\n}\r\n\r\nexport default AddExpensesPage","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import Container from 'react-bootstrap/Container';\r\n// import Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport AddNewItemButton from '../AddNewItemButton';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport NavBar from \"../NavBar/NavBar\"\r\n\r\nimport '../App.css';\r\n\r\nimport globalSettings from './../globalSettings';\r\n\r\n// import {\r\n//     useHistory,\r\n// } from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction PackageAllPage() {\r\n\tlet headerNames = [\"Kods\", \"Nosaukums\", \"Mērvienība\", \"Cena\", \"Убрать\"]\r\n\t// let sourceFileName = \"/..\" + globalSettings[\"packageFileName\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n\t\t{/* <RawMaterialTable/> */}\r\n\t\t<h3 className=\"text-center\">Упаковка</h3>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<TableBody/>}\r\n\t\t/>\r\n\t\t<AddNewItemButton message={\"package:ask-for-window\"}/>\r\n\t</>\r\n\t);\r\n}\r\n\r\nfunction TableBody(props) {\r\n    // Get raw material data from main process\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tdata = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"iepakojums\")\r\n\t\t.value()\r\n\r\n    // Create the list\r\n    let itemList = [];\r\n\r\n    data.forEach(item => {\r\n        itemList.push(\r\n            <tr key={item.nosaukums.toString()} >\r\n\t\t\t\t<td>{item.kods}</td>\r\n                <td>{item.nosaukums}</td>\r\n\t\t\t\t<td>{item.mervieniba}</td>\r\n                <td><Cena item={item} {...props}/></td>\r\n                <td>\r\n                    <DeleteRawButton nosaukums={item.nosaukums} {...props} />\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return(\r\n\t\t<>\r\n        <tbody>\r\n            {itemList}\r\n        </tbody> \r\n\t\t</>\r\n    )\r\n}\r\n\r\nfunction Cena(props) {\r\n\tconst [cena, setCena] = useState(parseFloat(props.item.cena));\r\n\tconst [validated, setValidated] = useState(false);\r\n\r\n\tfunction handleChange(event) {\r\n        setCena(event.target.value)\r\n    }\r\n\tfunction handleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setValidated(true);\r\n        } else {\r\n            setValidated(false);\r\n            // Update the value\r\n\t\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n            lodash\r\n                .chain(data)\r\n                .get(\"iepakojums\")\r\n                .find({nosaukums: props.item.nosaukums})\r\n                .assign({\"cena\" : parseFloat(cena)})\r\n                .value()\r\n            \r\n\t\t\t// We need to update the value everythere i.e. in all groups and all products\r\n\t\t\t// which have this specific expense in the list\r\n\r\n\t\t\t// Get all products\r\n\t\t\tlet productObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"produkti\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\t// Get all grupas\r\n\t\t\tlet groupObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"grupas\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\tproductObjects.forEach(product => {\r\n\t\t\t\t// Get object\r\n\t\t\t\tlet iepakObj = lodash\r\n\t\t\t\t\t.chain(product)\r\n\t\t\t\t\t.get(\"iepakojums\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\tlet daudzums = lodash\r\n\t\t\t\t\t.chain(iepakObj)\r\n\t\t\t\t\t.get(\"daudzums\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\tlet element = lodash\r\n\t\t\t\t\t.chain(iepakObj)\r\n\t\t\t\t\t.get(\"elementi\")\r\n\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\t// If object exists\r\n\t\t\t\tif (element !== undefined) {\r\n\r\n\t\t\t\t\tlet summa_iepak = cena * element[\"norma\"]\r\n\t\t\t\t\tlet summa_vien = summa_iepak / daudzums\r\n\r\n\t\t\t\t\tlodash\r\n\t\t\t\t\t\t.chain(element)\r\n\t\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n\t\t\t\t\t\t.assign({\"summa_iepak\" : parseFloat(summa_iepak)})\r\n\t\t\t\t\t\t.assign({\"summa_vien\" : parseFloat(summa_vien)})\r\n\t\t\t\t\t\t.value()\r\n\t\t\t\t}\r\n\r\n\t\t\t})\r\n\r\n\t\t\tgroupObjects.forEach(group => {\r\n\t\t\t\t// Get object\r\n\t\t\t\tlet iepakObj = lodash\r\n\t\t\t\t\t.chain(group)\r\n\t\t\t\t\t.get(\"iepakojums\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\tlet daudzums = lodash\r\n\t\t\t\t\t.chain(iepakObj)\r\n\t\t\t\t\t.get(\"daudzums\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\tlet element = lodash\r\n\t\t\t\t\t.chain(iepakObj)\r\n\t\t\t\t\t.get(\"elementi\")\r\n\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t.value()\r\n\t\t\t\t\r\n\r\n\t\t\t\t// If object exists\r\n\t\t\t\tif (element !== undefined) {\r\n\t\t\t\t\tlet summa_iepak = cena * element[\"norma\"]\r\n\t\t\t\t\tlet summa_vien = summa_iepak / daudzums\r\n\r\n\t\t\t\t\tlodash\r\n\t\t\t\t\t\t.chain(element)\r\n\t\t\t\t\t\t.assign({\"cena\" : parseFloat(cena)})\r\n\t\t\t\t\t\t.assign({\"summa_iepak\" : parseFloat(summa_iepak)})\r\n\t\t\t\t\t\t.assign({\"summa_vien\" : parseFloat(summa_vien)})\r\n\t\t\t\t\t\t.value()\r\n\t\t\t\t}\r\n\t\t\t})\r\n\r\n\t\t\t// Update data\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\t\t\t\r\n        }\r\n    }\r\n\treturn (\r\n\t\t<Form noValidate validated={validated}>\r\n\t\t\t<Form.Group>\r\n\t\t\t\t<Form.Control type=\"number\" required \r\n\t\t\t\t\tplaceholder=\"Цена\" \r\n\t\t\t\t\tvalue={cena} \r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tonBlur={handleValidation}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n\t\t\t\t\tВведите цену\r\n\t\t\t\t</Form.Control.Feedback>\r\n\t\t\t</Form.Group>  \r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\n\r\nfunction DeleteRawButton(props) {\r\n\tfunction handleClick() {\r\n\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n\t\tipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n\t\t\tlodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"iepakojums\")\r\n\t\t\t\t.remove({nosaukums: props.nosaukums})\r\n\t\t\t\t.value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={handleClick}>удалить</Button>\r\n\t)\r\n}\r\n\r\nexport default PackageAllPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\n// import globalSettings from './../globalSettings';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nclass PackageAddPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            kods: '',\r\n            nosaukums: '',\r\n            mervieniba: '',\r\n            cena: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n  \r\n        this.handleKodsChange = this.handleKodsChange.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleMervienibaChange = this.handleMervienibaChange.bind(this);\r\n        this.handlePriceChange = this.handlePriceChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n  \r\n    handleKodsChange(event) {\r\n        this.setState({kods: event.target.value});\r\n    }\r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n    handleMervienibaChange(event) {\r\n        console.log(event.target.value)\r\n        this.setState({mervieniba: event.target.value});\r\n    }\r\n    handlePriceChange(event) {\r\n        this.setState({cena: event.target.value});\r\n    }\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                kods={this.state.kods}\r\n                nosaukums={this.state.nosaukums}\r\n                mervieniba={this.state.mervieniba}\r\n                cena={this.state.cena}\r\n\r\n                handleKodsChange={this.handleKodsChange}\r\n                handleMervienibaChange={this.handleMervienibaChange}\r\n                handleNameChange={this.handleNameChange} \r\n                handlePriceChange={this.handlePriceChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}   \r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // let sourceFileName = \"/..\" + globalSettings[\"packageFileName\"]\r\n\r\n        // Check the input correctness\r\n        // Get raw material data from main process\r\n        // this.data = ipcRenderer.sendSync('get', [\r\n        //     [],\r\n        //     [],\r\n        //     sourceFileName\r\n        // ]);\r\n\t\t// this.data = JSON.parse(this.data)\r\n\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(\"iepakojums\")\r\n            .value()\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\" || this.props.cena === \"\" || this.props.kods === \"\" || this.props.mervieniba === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if element already exists\r\n            let element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Сырье с названием \"${this.props.nosaukums}\" уже существует`);\r\n            // Check if price is written correctly\r\n            } else if (!isNumeric(this.props.cena)) {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Цена введена в неправильном формате`);\r\n            } else if (!isNumeric(this.props.kods)) {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Код введен в неправильном формате`);\r\n            } else {\r\n                let paramObj =  \r\n                    { \r\n                        \"kods\": parseInt(this.props.kods), \r\n                        \"nosaukums\": this.props.nosaukums, \r\n                        \"mervieniba\": this.props.mervieniba, \r\n                        \"cena\": parseFloat(this.props.cena)\r\n                    }\r\n                \r\n\r\n                // ipcRenderer.sendSync('modify',  [\r\n                //     \"add\", \r\n                //     [], \r\n                //     [], \r\n                //     sourceFileName,\r\n                //     JSON.stringify(paramObj)\r\n                // ]);\r\n\r\n                let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                lodash\r\n                    .chain(tempData)\r\n                    .get(\"iepakojums\")\r\n                    .push(paramObj)\r\n                    .value()\r\n                ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Код</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.kods} onChange={this.props.handleKodsChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Mērvienība</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" value={this.props.mervieniba} onChange={this.props.handleMervienibaChange}>\r\n                        <option value=\"\">Mērvienība</option>\r\n                        <option value=\"kg\">kg</option>\r\n                        <option value=\"gab\">gab</option>\r\n                        <option value=\"l\">l</option>\r\n                    </Form.Select>\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPrice\">\r\n                    <Form.Label>Цена за единицу</Form.Label>\r\n                    <Form.Control placeholder=\"Цена\" value={this.props.cena} onChange={this.props.handlePriceChange} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default PackageAddPage;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\n// import globalSettings from '../globalSettings';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nclass WorkersAddPage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nosaukums: '',\r\n            alga: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleAlgaChange = this.handleAlgaChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n    handleAlgaChange(event) {\r\n        this.setState({alga: event.target.value});\r\n    }\r\n\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                nosaukums={this.state.nosaukums}\r\n                alga={this.state.alga}\r\n\r\n                handleNameChange={this.handleNameChange} \r\n                handleAlgaChange={this.handleAlgaChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}   \r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\nfunction isNumeric(str) {\r\n    if (typeof str != \"string\") return false // we only process strings!  \r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n           !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n        let nodoklis = lodash\r\n            .chain(this.data)\r\n            .get(\"darbinieku_nodoklis\")\r\n            .value()\r\n        \r\n\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(\"darbinieki\")\r\n            .value()\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\" || this.props.alga === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if element already exists\r\n            let element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Работник с названием \"${this.props.nosaukums}\" уже существует`);\r\n            // Check if price is written correctly\r\n            } else if (!isNumeric(this.props.alga)) {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Зарплата введена в неправильном формате`);\r\n            } else {    \r\n                let alga = parseFloat(this.props.alga)\r\n                let alga_procents = (alga * nodoklis) / 100\r\n                let alga_nodoklis = alga + alga_procents\r\n\r\n                let paramObj = \r\n                    { \r\n                        \"nosaukums\": this.props.nosaukums, \r\n                        \"alga\": alga,\r\n                        \"alga_procents\" : alga_procents,\r\n                        \"alga_nodoklis\" : alga_nodoklis\r\n                    }\r\n\r\n                let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n                lodash\r\n                    .chain(tempData)\r\n                    .get(\"darbinieki\")\r\n                    .push(paramObj)\r\n                    .value()\r\n                ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupPrice\">\r\n                    <Form.Label>Ставка</Form.Label>\r\n                    <Form.Control placeholder=\"Цена\" value={this.props.alga} onChange={this.props.handleAlgaChange} />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default WorkersAddPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import Navbar from 'react-bootstrap/Navbar';\r\n// import Nav from 'react-bootstrap/Nav';\r\n// import Container from 'react-bootstrap/Container';\r\n// import Table from 'react-bootstrap/Table';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport AddNewItemButton from '../AddNewItemButton';\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport NavBar from \"../NavBar/NavBar\"\r\n\r\nimport '../App.css';\r\n\r\nimport globalSettings from '../globalSettings';\r\n\r\n// import {\r\n// \tBrowserRouter as Router,\r\n//     useHistory,\r\n// \tuseParams\r\n// } from \"react-router-dom\";\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction WorkersAllPage() {\r\n\tlet headerNames = [\"Nosaukums\", \"Alga\", \"% Daļa\", \"Summa\", \"Убрать\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n\t\t<h3 className=\"text-center\">Список рабочих</h3>\r\n\t\t<Nodoklis/>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<TableBody/>}\r\n\t\t/>\r\n\t\t<AddNewItemButton message={\"workers:ask-for-window\"}/>\r\n\t</>\r\n\t);\r\n}\r\n\r\nfunction Nodoklis(props) {\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n\tconst [nodoklis, setNodoklis] = useState(data[\"darbinieku_nodoklis\"]);\r\n    const [nodoklisValidated, setNodoklisValidated] = useState(false);\r\n\r\n\tfunction handleChange(event) {\r\n\t\tsetNodoklis(event.target.value)\r\n\t}\r\n\r\n\tfunction handleValidation(event) {\r\n\t\tconst form = event.currentTarget;\r\n\t\tif (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setNodoklisValidated(true);\r\n        } else {\r\n            setNodoklisValidated(false);\r\n            // Update the values\r\n            let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n\t\t\tdata[\"darbinieku_nodoklis\"] = nodoklis\r\n\t\t\tlet darbinieki = data[\"darbinieki\"]\r\n\r\n\t\t\t// Get all products\r\n\t\t\tlet productObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"produkti\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\t// Get all grupas\r\n\t\t\tlet groupObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"grupas\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\tdarbinieki.forEach(item => {\r\n\t\t\t\t// Update data in the general list\r\n\t\t\t\titem[\"alga_procents\"] = (item[\"alga\"] * nodoklis) / 100\r\n\t\t\t\titem[\"alga_nodoklis\"] = item[\"alga\"] + item[\"alga_procents\"]\r\n\r\n\t\t\t\t// Update the alga for each darbinieks everywhere\r\n\t\t\t\tproductObjects.forEach(product => {\r\n\t\t\t\t\t// Get object\r\n\t\t\t\t\tlet razGrupas = lodash\r\n\t\t\t\t\t\t.chain(product)\r\n\t\t\t\t\t\t.get(\"ražošanas_grupas\")\r\n\t\t\t\t\t\t.value()\r\n\t\r\n\t\t\t\t\trazGrupas.forEach(razGroup => {\r\n\t\t\t\t\t\tlet daudzums = razGroup[\"daudzums\"]\r\n\t\t\t\t\t\tlet darbinieks = lodash\r\n\t\t\t\t\t\t\t.chain(razGroup)\r\n\t\t\t\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t\t\t\t.find({nosaukums:item.nosaukums})\r\n\t\t\t\t\t\t\t.value()\r\n\t\r\n\t\t\t\t\t\t// If object exists\r\n\t\t\t\t\t\tif (darbinieks !== undefined) {\r\n\t\t\t\t\t\t\t// Update the workers data in the product or group\r\n\t\t\t\t\t\t\tdarbinieks[\"alga_nodoklis\"] = item[\"alga_nodoklis\"]\r\n\t\t\t\t\t\t\tdarbinieks[\"summa\"] = item[\"alga_nodoklis\"] * darbinieks[\"norma\"]\r\n\t\t\t\t\t\t\tdarbinieks[\"summa_vien\"] = darbinieks[\"summa\"] / daudzums\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t\t// Update the alga for each darbinieks everywhere\r\n\t\t\t\tgroupObjects.forEach(group => {\r\n\t\t\t\t\t// Get object\r\n\t\t\t\t\tlet razGrupas = lodash\r\n\t\t\t\t\t\t.chain(group)\r\n\t\t\t\t\t\t.get(\"ražošanas_grupas\")\r\n\t\t\t\t\t\t.value()\r\n\t\r\n\t\t\t\t\trazGrupas.forEach(razGroup => {\r\n\t\t\t\t\t\tlet daudzums = razGroup[\"daudzums\"]\r\n\t\t\t\t\t\tlet darbinieks = lodash\r\n\t\t\t\t\t\t\t.chain(razGroup)\r\n\t\t\t\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t\t\t\t.find({nosaukums:item.nosaukums})\r\n\t\t\t\t\t\t\t.value()\r\n\t\r\n\t\t\t\t\t\t// If object exists\r\n\t\t\t\t\t\tif (darbinieks !== undefined) {\r\n\t\t\t\t\t\t\t// Update the workers data in the product or group\r\n\t\t\t\t\t\t\tdarbinieks[\"alga_nodoklis\"] = item[\"alga_nodoklis\"]\r\n\t\t\t\t\t\t\tdarbinieks[\"summa\"] = item[\"alga_nodoklis\"] * darbinieks[\"norma\"]\r\n\t\t\t\t\t\t\tdarbinieks[\"summa_vien\"] = darbinieks[\"summa\"] / daudzums\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\r\n\t\t\t})\r\n\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n            \r\n        }\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t<Form noValidate validated={nodoklisValidated}>\r\n            <Form.Group>\r\n                <Form.Label>Налог на зарплату(%)</Form.Label>\r\n                <Form.Control id=\"daudzums\" type=\"number\" required \r\n                    placeholder=\"Кол-во\" \r\n                    value={nodoklis} \r\n                    onChange={handleChange}\r\n                    onBlur={handleValidation}\r\n                />\r\n                <Form.Control.Feedback type=\"invalid\">\r\n                    Введите налог\r\n                </Form.Control.Feedback>\r\n            </Form.Group>  \r\n        </Form>\r\n\t\t</>   \r\n\t)\r\n}\r\n\r\nfunction TableBody(props) {\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tdata = lodash\r\n\t\t.chain(data)\r\n\t\t.get(\"darbinieki\")\r\n\t\t.value()\r\n\r\n    // Create the list\r\n    let itemList = [];\r\n\r\n    data.forEach(item => {\r\n        itemList.push(\r\n            <tr key={item.nosaukums.toString()} >\r\n                <td>{item.nosaukums}</td>\r\n                <td><Alga item={item} {...props}/></td>\r\n\t\t\t\t<td>{item.alga_procents.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n\t\t\t\t<td>{item.alga_nodoklis.toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td>\r\n                <td>\r\n                    <DeleteButton nosaukums={item.nosaukums} {...props} />\r\n                </td>\r\n            </tr>\r\n        );\r\n    });\r\n\r\n    return(\r\n\t\t<>\r\n        <tbody>\r\n            {itemList}\r\n        </tbody> \r\n\t\t</>\r\n    )\r\n}\r\n\r\nfunction Alga(props) {\r\n\tconst [alga, setAlga] = useState(parseFloat(props.item.alga));\r\n\tconst [validated, setValidated] = useState(false);\r\n\r\n\tfunction handleChange(event) {\r\n        setAlga(event.target.value)\r\n    }\r\n\tfunction handleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setValidated(true);\r\n        } else {\r\n            setValidated(false);\r\n            // Update the value\r\n\t\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\t\t\tlet nodoklis = data[\"darbinieku_nodoklis\"]\r\n\r\n\t\t\tlet darbinieksObj = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t.value()\r\n\r\n\t\t\tdarbinieksObj[\"alga\"] = parseFloat(alga)\r\n\t\t\tdarbinieksObj[\"alga_procents\"] = (darbinieksObj[\"alga\"] * nodoklis) / 100\r\n\t\t\tdarbinieksObj[\"alga_nodoklis\"] = darbinieksObj[\"alga\"] + darbinieksObj[\"alga_procents\"] \r\n            \r\n\t\t\t// We need to update the value everythere i.e. in all groups and all products\r\n\t\t\t// which have this specific expense in the list\r\n\r\n\t\t\t// Get all products\r\n\t\t\tlet productObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"produkti\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\t// Get all grupas\r\n\t\t\tlet groupObjects = lodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"grupas\")\r\n\t\t\t\t.value()\r\n\r\n\t\t\tproductObjects.forEach(product => {\r\n\t\t\t\t// Get object\r\n\t\t\t\tlet razGrupas = lodash\r\n\t\t\t\t\t.chain(product)\r\n\t\t\t\t\t.get(\"ražošanas_grupas\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\trazGrupas.forEach(razGroup => {\r\n\t\t\t\t\tlet daudzums = razGroup[\"daudzums\"]\r\n\r\n\t\t\t\t\tlet darbinieks = lodash\r\n\t\t\t\t\t\t.chain(razGroup)\r\n\t\t\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t\t.value()\r\n\r\n\t\t\t\t\t// If object exists\r\n\t\t\t\t\tif (darbinieks !== undefined) {\r\n\t\t\t\t\t\tdarbinieks[\"alga\"] = darbinieksObj[\"alga\"]\r\n\t\t\t\t\t\tdarbinieks[\"alga_nodoklis\"] = darbinieksObj[\"alga_nodoklis\"]\r\n\t\t\t\t\t\tdarbinieks[\"summa\"] = darbinieks[\"alga_nodoklis\"]  * darbinieks[\"norma\"]\r\n\t\t\t\t\t\tdarbinieks[\"summa_vien\"] = darbinieks[\"summa\"] / daudzums\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n\r\n\t\t\tgroupObjects.forEach(group => {\r\n\t\t\t\t// Get object\r\n\t\t\t\tlet razGrupas = lodash\r\n\t\t\t\t\t.chain(group)\r\n\t\t\t\t\t.get(\"ražošanas_grupas\")\r\n\t\t\t\t\t.value()\r\n\r\n\t\t\t\trazGrupas.forEach(razGroup => {\r\n\t\t\t\t\tlet daudzums = razGroup[\"daudzums\"]\r\n\r\n\t\t\t\t\tlet darbinieks = lodash\r\n\t\t\t\t\t\t.chain(razGroup)\r\n\t\t\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t\t\t.find({nosaukums: props.item.nosaukums})\r\n\t\t\t\t\t\t.value()\r\n\r\n\t\t\t\t\t// If object exists\r\n\t\t\t\t\tif (darbinieks !== undefined) {\r\n\t\t\t\t\t\tlet summa = alga * darbinieks[\"norma\"]\r\n\t\t\t\t\t\tlet summa_vien = summa / daudzums\r\n\r\n\t\t\t\t\t\tlodash\r\n\t\t\t\t\t\t\t.chain(darbinieks)\r\n\t\t\t\t\t\t\t.assign({\"alga\" : parseFloat(alga)})\r\n\t\t\t\t\t\t\t.assign({\"summa\" : parseFloat(summa)})\r\n\t\t\t\t\t\t\t.assign({\"summa_vien\" : parseFloat(summa_vien)})\r\n\t\t\t\t\t\t\t.value()\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t})\r\n            // Update data\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\t\r\n        }\r\n    }\r\n\treturn (\r\n\t\t<Form noValidate validated={validated}>\r\n\t\t\t<Form.Group>\r\n\t\t\t\t<Form.Control type=\"number\" required \r\n\t\t\t\t\tplaceholder=\"Цена\" \r\n\t\t\t\t\tvalue={alga} \r\n\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\tonBlur={handleValidation}\r\n\t\t\t\t/>\r\n\t\t\t\t<Form.Control.Feedback type=\"invalid\">\r\n\t\t\t\t\tВведите ставку\r\n\t\t\t\t</Form.Control.Feedback>\r\n\t\t\t</Form.Group>  \r\n\t\t</Form>\r\n\t)\r\n}\r\n\r\n\r\n// function NavigationBar() {\r\n\r\n// \tlet history = useHistory();\r\n\r\n// \tfunction handleClickMainPage() {\r\n// \t\thistory.push(\"/\");\r\n// \t}\r\n//   return (\r\n// \t<>\r\n// \t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n// \t\t\t<Container>\r\n// \t\t\t<Navbar.Brand onClick={handleClickMainPage}>На главную</Navbar.Brand>\r\n// \t\t\t\t<Nav className=\"me-auto\">\r\n// \t\t\t\t</Nav>\r\n// \t\t\t</Container>\r\n// \t\t</Navbar>    \r\n// \t</>\r\n//   )\r\n// }\r\n\r\nfunction DeleteButton(props) {\r\n\tfunction handleClick() {\r\n\t\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n\t\tipcRenderer.send(\"warning-delete\")\r\n\t\tipcRenderer.on('confirm-delete', (event, arg) => {\r\n\t\t\tlodash\r\n\t\t\t\t.chain(data)\r\n\t\t\t\t.get(\"darbinieki\")\r\n\t\t\t\t.remove({nosaukums: props.nosaukums})\r\n\t\t\t\t.value()\r\n\t\t\tipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\t\t})\r\n\t}\r\n\treturn (\r\n\t\t<Button variant=\"danger\" size=\"sm\" onClick={handleClick}>удалить</Button>\r\n\t)\r\n}\r\n\r\nexport default WorkersAllPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport globalSettings from '../globalSettings';\r\nimport NavBar from \"../NavBar/NavBar\"\r\n\r\nimport '../App.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction Electricity() {\r\n\tlet headerNames = [\"Название\", \"Значение\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n        <h3 className=\"text-center\">Цена на электричество</h3>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<ElectricityTableBody/>}\r\n\t\t/>\r\n\t</>\r\n\t);\r\n}\r\n\r\n// function ElectricityTableBody(props) {\r\n//     // Get raw material data from main process\r\n// \tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n// \tlet elektriba = lodash\r\n// \t\t.chain(data)\r\n// \t\t.get(\"elektriba\")\r\n// \t\t.value()\r\n\r\n\r\n//     return(\r\n// \t\t<>\r\n//         <tbody>\r\n//             <tr>\r\n//                 <td >Cena</td>\r\n//                 <td><Cena value={elektriba}/></td>\r\n//             </tr>\r\n//         </tbody> \r\n// \t\t</>\r\n//     )\r\n// }\r\n\r\nfunction productUpdate(vien_summa) {\r\n    let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    // Price per each product must be updated for each product\r\n    let productObjects = lodash\r\n        .chain(tempData)\r\n        .get(\"produkti\")\r\n        .value()\r\n\r\n    productObjects.forEach(product => {\r\n        let elektribaObj = product[\"elektriba\"]\r\n        elektribaObj[\"vien_summa\"] = vien_summa\r\n        elektribaObj[\"summa\"] = elektribaObj[\"vien_summa\"] * elektribaObj[\"vien_daudzums\"]\r\n    })\r\n\r\n    // Update data\r\n    ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n}\r\n\r\n\r\n\r\nfunction ElectricityTableBody(props) {\r\n    // Get electricity data from main process\r\n    // let data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    // let productObj = lodash\r\n    //     .chain(data)\r\n    //     .get(props.type)\r\n    //     .find({nosaukums: props.nosaukums})\r\n    //     .value()\r\n\r\n    // let electricityObj = productObj[\"elektriba\"]\r\n\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\tlet electricityGeneral = lodash\r\n        .chain(data)\r\n        .get(\"elektriba\")\r\n        .value()\r\n\r\n    const [cena, setCena] = useState(parseFloat(electricityGeneral[\"cena\"]));\r\n\tconst [cenaValidated, setCenaValidated] = useState(false);\r\n\r\n    const [izlietota, setIzlietota] = useState(electricityGeneral[\"izlietota\"]);\r\n    const [izlietotaValidated, setIzlietotaValidated] = useState(false);\r\n\r\n    const [daudzums, setDaudzums] = useState(electricityGeneral[\"vien_daudzums\"]);\r\n    const [daudzumsValidated, setDaudzumsValidated] = useState(false);\r\n\r\n    const [summa, setSumma] = useState(parseFloat(electricityGeneral[\"summa\"]));\r\n\tconst [summaValidated, setSummaValidated] = useState(false);\r\n\r\n    const [vienSumma, setVienSumma] = useState(parseFloat(electricityGeneral[\"vien_summa\"]));\r\n\tconst [vienSummaValidated, setVienSummaValidated] = useState(false);\r\n\r\n    function cenaHandleChange(event) {\r\n        setCena(event.target.value)\r\n    }\r\n\r\n    function izlietotaHandleChange(event) {\r\n        setIzlietota(event.target.value)\r\n    };\r\n\r\n    function daudzumsHandleChange(event) {\r\n        setDaudzums(event.target.value)\r\n    };\r\n\r\n    function summaHandleChange(event) {\r\n        setSumma(event.target.value)\r\n    }\r\n\r\n    function vienSummaHandleChange(event) {\r\n        setVienSumma(event.target.value)\r\n    }\r\n\r\n    function cenaHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setCenaValidated(true);\r\n        } else {\r\n            setCenaValidated(false);\r\n\t\t\t// We need to calculate the cost of electricity for one product\r\n            // i.e. recalculate the total price (total electricity * cena)\r\n            // And then price per each product (total price / products created)\r\n            electricityGeneral[\"cena\"] = parseFloat(cena)\r\n            electricityGeneral[\"summa\"] = electricityGeneral[\"izlietota\"] * electricityGeneral[\"cena\"]\r\n            electricityGeneral[\"vien_summa\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"vien_daudzums\"]\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(electricityGeneral[\"vien_summa\"])\r\n        }\r\n    }\r\n\r\n    function izlietotaHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setIzlietotaValidated(true);\r\n        } else {\r\n            setIzlietotaValidated(false);\r\n            // Update the value\r\n            electricityGeneral[\"izlietota\"] = parseFloat(izlietota)\r\n            electricityGeneral[\"summa\"] = electricityGeneral[\"izlietota\"] * electricityGeneral[\"cena\"]\r\n            electricityGeneral[\"vien_summa\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"vien_daudzums\"] \r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(electricityGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n    function daudzumsHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setDaudzumsValidated(true);\r\n        } else {\r\n            setDaudzumsValidated(false);\r\n            // Update the value\r\n            electricityGeneral[\"vien_daudzums\"] = parseFloat(daudzums)\r\n            electricityGeneral[\"vien_summa\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"vien_daudzums\"] \r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(electricityGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n    function summaHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setSummaValidated(true);\r\n        } else {\r\n            setSummaValidated(false);\r\n            // Update the value\r\n            electricityGeneral[\"summa\"] = parseFloat(summa)\r\n            electricityGeneral[\"vien_summa\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"vien_daudzums\"] \r\n            electricityGeneral[\"izlietota\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"cena\"]\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(electricityGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n    function vienSummaHandleValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setVienSummaValidated(true);\r\n        } else {\r\n            setVienSummaValidated(false);\r\n            // Update the value\r\n            electricityGeneral[\"vien_summa\"] = parseFloat(vienSumma)\r\n            electricityGeneral[\"summa\"] = electricityGeneral[\"vien_summa\"] * electricityGeneral[\"vien_daudzums\"]\r\n            electricityGeneral[\"izlietota\"] = electricityGeneral[\"summa\"] / electricityGeneral[\"cena\"]\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(electricityGeneral[\"vien_summa\"])\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\" >Цена за kW:</td>\r\n                    <td>\r\n                    <Form noValidate validated={cenaValidated}>\r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" required \r\n                                placeholder=\"Цена\" \r\n                                value={cena} \r\n                                onChange={cenaHandleChange}\r\n                                onBlur={cenaHandleValidation}\r\n                                style={{ width: '200px', height: '30px' }}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Введите цену\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>  \r\n                    </Form>\r\n                    </td>\r\n                    {/* <td className=\"col-md-6\">{electricityObj[\"cena\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td> */}\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Потраченно (kWh):</td>\r\n                    <td>\r\n                        <Form noValidate validated={izlietotaValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={izlietota} \r\n                                    onChange={izlietotaHandleChange}\r\n                                    onBlur={izlietotaHandleValidation}\r\n                                    style={{ width: '200px', height: '30px' }}\r\n                                    // style={{ height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Единиц произведенно:</td>\r\n                    <td>\r\n                        <Form noValidate validated={daudzumsValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={daudzums} \r\n                                    onChange={daudzumsHandleChange}\r\n                                    onBlur={daudzumsHandleValidation}\r\n                                    style={{ width: '200px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"text-end\">Счет за электро:</td>\r\n                    {/* <td>{electricityGeneral[\"summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td> */}\r\n                    <td>\r\n                        <Form noValidate validated={summaValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={summa} \r\n                                    onChange={summaHandleChange}\r\n                                    onBlur={summaHandleValidation}\r\n                                    style={{ width: '200px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n                <tr className=\"align-middle \">\r\n                    <td className=\"text-end\">Цена/ед:</td>\r\n                    {/* <td>{electricityGeneral[\"vien_summa\"].toFixed(globalSettings[\"floatPrecisionSecondary\"])}</td> */}\r\n                    <td>\r\n                        <Form noValidate validated={vienSummaValidated}>\r\n                            <Form.Group>\r\n                                <Form.Control type=\"number\" required \r\n                                    placeholder=\"Кол-во\" \r\n                                    value={vienSumma} \r\n                                    onChange={vienSummaHandleChange}\r\n                                    onBlur={vienSummaHandleValidation}\r\n                                    style={{ width: '200px', height: '30px' }}\r\n                                />\r\n                                <Form.Control.Feedback type=\"invalid\">\r\n                                    Введите количество\r\n                                </Form.Control.Feedback>\r\n                            </Form.Group>  \r\n                        </Form>    \r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Electricity;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../App.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Alert from 'react-bootstrap/Alert';\r\n\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\n// import globalSettings from '../globalSettings';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\n\r\nfunction RazGrupasAddPage(props) {\r\n    let { productName, type } = useParams();\r\n\r\n    return (\r\n        <RazGrupasAddClass productName={productName} type={type}/>\r\n    )\r\n}\r\n\r\nclass RazGrupasAddClass extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nosaukums: '',\r\n            alga: '',\r\n            showAlert: false,\r\n            alertMessage: \"\"\r\n        };\r\n\r\n        this.data = {};\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n\r\n        this.setShowAlert = this.setShowAlert.bind(this);\r\n        this.setAlertMessage = this.setAlertMessage.bind(this);\r\n\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.setState({nosaukums: event.target.value});\r\n    }\r\n\r\n    setShowAlert(value) {\r\n        this.setState({showAlert: value});\r\n    }\r\n    setAlertMessage(value) {\r\n        this.setState({alertMessage: value});\r\n    }\r\n  \r\n    \r\n    render(props) {\r\n\r\n        return (\r\n            <>\r\n            <InputAlert \r\n                showAlert={this.state.showAlert} \r\n                alertMessage={this.state.alertMessage} \r\n                onClose={() => this.setShowAlert(false)}\r\n            />\r\n            <InputForm \r\n                nosaukums={this.state.nosaukums}\r\n\r\n                handleNameChange={this.handleNameChange} \r\n                setShowAlert={this.setShowAlert}  \r\n                setAlertMessage={this.setAlertMessage}  \r\n                {...this.props}\r\n            />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction InputAlert(props) {\r\n\r\n    if (props.showAlert) {\r\n        return (\r\n            <Alert variant=\"danger\" onClose={props.onClose} dismissible>\r\n                {props.alertMessage}\r\n            </Alert>\r\n        );\r\n      }\r\n    return (null)\r\n}\r\n\r\n// function isNumeric(str) {\r\n//     if (typeof str != \"string\") return false // we only process strings!  \r\n//     return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n//            !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n// }\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n\r\n        // let sourceFileName\r\n\r\n        // if (this.props.type === \"product\") {\r\n        //     sourceFileName = \"/..\" + globalSettings[\"productsFileName\"]\r\n        // } else if (this.props.type === \"group\") {\r\n        //     sourceFileName = \"/..\" + globalSettings[\"groupsFileName\"]\r\n        // }\r\n\r\n        // let productObj = {key:\"nosaukums\", value:this.props.productName}\r\n        // Check the input correctness\r\n        // this.data = ipcRenderer.sendSync('get', [\r\n        //     [JSON.stringify(productObj), \"ražošanas_grupas\"],\r\n        //     [0,1],\r\n        //     sourceFileName\r\n        // ]);\r\n\t\t// this.data = JSON.parse(this.data)\r\n\r\n        this.data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n        this.data = lodash\r\n            .chain(this.data)\r\n            .get(this.props.type)\r\n            .find({nosaukums: this.props.productName})\r\n            .get(\"ražošanas_grupas\")\r\n            .value()\r\n\r\n        // Check if empty\r\n        if (this.props.nosaukums === \"\") {\r\n            this.props.setShowAlert(true)\r\n            this.props.setAlertMessage(\"Введите данные\")\r\n        } else {\r\n            // Check if element already exists\r\n            let element = this.data.find(element => element.nosaukums === this.props.nosaukums);\r\n            if (typeof(element) != \"undefined\") {\r\n                this.props.setShowAlert(true)\r\n                this.props.setAlertMessage(`Группа производства с названием \"${this.props.nosaukums}\" уже существует`);\r\n            // Check if price is written correctly\r\n            } else {\r\n                let paramObj = \r\n                    { \r\n                        \"nosaukums\": this.props.nosaukums, \r\n                        \"daudzums\": 1,\r\n                        \"darbinieki\": []\r\n                    }\r\n                \r\n\r\n                // ipcRenderer.sendSync('modify',  [\r\n                //     \"add\", \r\n                //     [JSON.stringify(productObj), \"ražošanas_grupas\"],\r\n                //     [0,1],\r\n                //     sourceFileName,\r\n                //     JSON.stringify(paramObj)\r\n                // ]);\r\n\r\n\r\n                let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n                lodash\r\n                    .chain(tempData)\r\n                    .get(this.props.type)\r\n                    .find({nosaukums: this.props.productName})\r\n                    .get(\"ražošanas_grupas\")\r\n                    .push(paramObj)\r\n                    .value()\r\n                ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n            }\r\n        } \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group className=\"mb-3\" controlId=\"formGroupName\">\r\n                    <Form.Label>Название</Form.Label>\r\n                    <Form.Control placeholder=\"Название\" value={this.props.nosaukums} onChange={this.props.handleNameChange}  />\r\n                </Form.Group>\r\n                <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\r\n                    Подтвердить\r\n                </Button>\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default RazGrupasAddPage;","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nimport GeneralizedTable from '../GeneralizedTable';\r\nimport globalSettings from '../globalSettings';\r\nimport NavBar from \"../NavBar/NavBar\"\r\n\r\nimport '../App.css';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\nconst lodash = require('lodash');\r\n\r\nfunction AlcoholTax() {\r\n\tlet headerNames = [\"Название\", \"Значение\"]\r\n\r\n\treturn (\r\n\t<>\r\n\t\t<NavBar/>\r\n        <h3 className=\"text-center\">Акциз</h3>\r\n\t\t<GeneralizedTable \r\n\t\t\theaderNames={headerNames}\r\n\t\t\ttableBody={<ElectricityTableBody/>}\r\n\t\t/>\r\n\t</>\r\n\t);\r\n}\r\n\r\n\r\nfunction productUpdate(value) {\r\n    let tempData = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n    // Price per each product must be updated for each product\r\n    // that contains tax for the alcohol\r\n    let productObjects = lodash\r\n        .chain(tempData)\r\n        .get(\"produkti\")\r\n        .value()\r\n\r\n    productObjects.forEach(product => {\r\n        let obj = product[\"alcohol_tax\"]\r\n        if (obj != null) {\r\n            obj[\"value\"] = value\r\n            obj[\"summa\"] = ((obj[\"value\"] * obj[\"alcohol\"]) / 100) * obj[\"volume\"];\r\n        }\r\n    })\r\n\r\n    // Update data\r\n    ipcRenderer.sendSync('modify-data', [ JSON.stringify(tempData) ])\r\n}\r\n\r\n\r\n\r\nfunction ElectricityTableBody(props) {\r\n    // Get electricity data from main process\r\n\tlet data = JSON.parse(ipcRenderer.sendSync('get-data'));\r\n\r\n    const [alcoholTax, setAlcoholTax] = useState(parseFloat(data[\"alcohol_tax\"]));\r\n\tconst [alcoholTaxValidated, setAlcoholTaxValidated] = useState(false);\r\n\r\n    function alcoholTaxHandleChange(event) {\r\n        setAlcoholTax(event.target.value)\r\n    }\r\n\r\n\r\n    function alcoholTaxValidation(event) {\r\n        const form = event.currentTarget;\r\n        if (form.checkValidity() === false) {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            setAlcoholTaxValidated(true);\r\n        } else {\r\n            setAlcoholTaxValidated(false);\r\n\t\t\t// We need to calculate the cost of electricity for one product\r\n            // i.e. recalculate the total price (total electricity * cena)\r\n            // And then price per each product (total price / products created)\r\n            data[\"alcohol_tax\"] = parseFloat(alcoholTax)\r\n\r\n            ipcRenderer.sendSync('modify-data', [ JSON.stringify(data) ])\r\n\r\n            productUpdate(data[\"alcohol_tax\"])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <> \r\n            <tbody>\r\n                <tr className=\"align-middle\">\r\n                    <td className=\"col-md-3 text-end\" >Акциз (за 1 градус на 100л):</td>\r\n                    <td>\r\n                    <Form noValidate validated={alcoholTaxValidated}>\r\n                        <Form.Group>\r\n                            <Form.Control type=\"number\" required \r\n                                placeholder=\"Акциз (за 1 градус на 100л)\" \r\n                                value={alcoholTax} \r\n                                onChange={alcoholTaxHandleChange}\r\n                                onBlur={alcoholTaxValidation}\r\n                                style={{ width: '200px', height: '30px' }}\r\n                            />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Введите акциз\r\n                            </Form.Control.Feedback>\r\n                        </Form.Group>  \r\n                    </Form>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default AlcoholTax;","import React from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n// import Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n// import Alert from 'react-bootstrap/Alert';\r\n\r\nconst { ipcRenderer } = window.require(\"electron\");\r\n// const lodash = require('lodash');\r\n\r\n\r\nfunction WarningDelete(props) {\r\n\r\n    function handleDelete() {\r\n\t\tipcRenderer.send(\"confirm-delete\")\r\n\t}\r\n\r\n    function handleCancel() {\r\n\t\tipcRenderer.send(\"cancel-delete\")\r\n\t}\r\n\r\n    return (\r\n        <>\r\n        <h1>Удаление элемента</h1>\r\n        <h3>Вы точно хотите удалить данный элемент?</h3>\r\n        <Button variant=\"secondary\" size=\"sm\" onClick={handleCancel}>отмена</Button>\r\n        <Button variant=\"danger\" size=\"sm\" onClick={handleDelete}>удалить</Button>\r\n        </ >\r\n    )\r\n}\r\n\r\n\r\nexport default WarningDelete;","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport  { useState } from 'react';\r\n\r\nfunction FileСhoice(props) {\r\n\r\n    const [ filePath, setFilePath] = useState(null);\r\n\r\n    function filePathHandleChange(event) {\r\n        setFilePath(event.target.value)\r\n    };\r\n\r\n    function handleClick() {\r\n        console.log(\"clicked!!!\");\r\n        console.log(filePath);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Form>\r\n            <Form.Group controlId=\"formFile\" className=\"mb-3\">\r\n                <Form.Label>Default file input example</Form.Label>\r\n                <Form.Control type=\"file\" onChange={filePathHandleChange}/>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"success\" type=\"button\" size=\"sm\" onClick={handleClick}>\r\n                Подтвердить\r\n            </Button>\r\n        </Form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default FileСhoice;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n// import './index.css';\r\n\r\nimport MainPage from './MainPage';\r\nimport ProductPage from './ProductPage';\r\nimport GroupPage from './GroupPage';\r\n\r\nimport RawMaterialAllPage from './RawMaterial/RawMaterialAllPage';\r\nimport RawMaterialAddPage from './RawMaterial/RawMaterialAddPage';\r\n\r\nimport FixedCostAllAddPage from './FixedCost/FixedCostAllAddPage';\r\nimport FixedCostAllPage from './FixedCost/FixedCostAllPage';\r\n\r\nimport WaterAllAddPage from './Water/WaterAllAddPage';\r\nimport WaterAllPage from './Water/WaterAllPage';\r\n\r\nimport AddExpensesPage from './AddExpensesPage';\r\n\r\nimport PackageAllPage from './Package/PackageAllPage';\r\nimport PackageAddPage from './Package/PackageAddPage';\r\n\r\nimport WorkersAddPage from './Workers/WorkersAddPage';\r\nimport WorkersAllPage from './Workers/WorkersAllPage';\r\n\r\nimport Electricity from './Electricity/Electricity';\r\n\r\nimport RazGrupasAddPage from './Workers/RazGrupasAddPage';\r\nimport AlcoholTax from './AlcoholTax/AlcoholTax';\r\n\r\nimport WarningDelete from './WarningDelete';\r\nimport FileСhoice from './FileСhoice';\r\n\r\nimport {\r\n\tHashRouter as Router,\r\n\tSwitch,\r\n\tRoute\r\n\t// useParams,\r\n\t// Link\r\n} from \"react-router-dom\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nfunction ScrollToTop() {\r\n\tconst { pathname } = useLocation();\r\n  \r\n\tuseEffect(() => {\r\n\t  window.scrollTo(0, 0);\r\n\t}, [pathname]);\r\n  \r\n\treturn null;\r\n}\r\n\r\nReactDOM.render(\r\n\t<>\r\n\t\t<Router>\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\">\r\n\t\t\t\t\t<MainPage />\r\n\t\t\t\t\t{/* <FileСhoice /> */}\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/file\">\r\n\t\t\t\t\t<FileСhoice />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/product-*\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<ProductRouting />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/group-*\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<GroupRouting />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/expenses-add-window/:destinationEntryNameTemp/:infoTemp\">\r\n\t\t\t\t\t{/* <AddRawMaterialToProductPage /> */}\r\n\t\t\t\t\t<AddExpensesPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/raw-material-*\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<RawMaterialRouting />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/fixed-cost-all\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<FixedCostAllPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/fixed-cost-all-add\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<FixedCostAllAddPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/water-all\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<WaterAllPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/water-all-add\">\r\n\t\t\t\t\t<WaterAllAddPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/package-all\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<PackageAllPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/package-add\">\r\n\t\t\t\t\t<PackageAddPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/workers-add\">\r\n\t\t\t\t\t<WorkersAddPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/workers-all\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<WorkersAllPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/raz-grupas-add/:productName/:type\">\r\n\t\t\t\t\t<RazGrupasAddPage />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/electricity\">\r\n\t\t\t\t\t<ScrollToTop />\r\n\t\t\t\t\t<Electricity />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/alcohol-tax\">\r\n\t\t\t\t\t<AlcoholTax />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route exact path=\"/warning-delete\">\r\n\t\t\t\t\t<WarningDelete />\r\n\t\t\t\t</Route>\r\n\t\t\t\t<Route>\r\n\t\t\t\t\t<NoMatch />\r\n    \t\t\t</Route>\r\n\t\t\t</Switch>\r\n\t\t</Router>\r\n\t</>,\r\n\tdocument.getElementById('root')\r\n);\r\n\r\nfunction NoMatch() {\r\n\treturn (\r\n\t\t<h1>404 Error</h1>\r\n\t)\r\n}\r\n\r\nfunction ProductRouting() {\r\n\treturn (\r\n\t\t<>\r\n\t\t<Switch>\r\n\t\t\t{/* <Route exact path=\"/product-fixed-cost-add-general-:productName/:info\">\r\n\t\t\t\t<AddFixedCostToProductPage />\r\n\t\t\t</Route>\r\n\t\t\t<Route exact path=\"/product-water-add-general-:productName/:info\">\r\n\t\t\t\t<AddWaterToProductPage />\r\n\t\t\t</Route> */}\r\n\t\t\t<Route exact path=\"/product-:kods\">\r\n\t\t\t\t<ProductPage />\r\n\t\t\t</Route>\r\n\t\t</Switch>\r\n\t\t</>\t\r\n\t)\r\n}\r\n\r\nfunction RawMaterialRouting() {\r\n\treturn (\r\n\t\t<>\r\n\t\t<Switch>\r\n\t\t\t<Route exact path=\"/raw-material-all\">\r\n\t\t\t\t<RawMaterialAllPage />\r\n\t\t\t</Route>\r\n\t\t\t<Route exact path=\"/raw-material-group\">\r\n\t\t\t\t<RawMaterialAllPage />\r\n\t\t\t</Route>\r\n\t\t\t<Route exact path=\"/raw-material-add\">\r\n\t\t\t\t<RawMaterialAddPage />\r\n\t\t\t</Route>\r\n\t\t</Switch>\r\n\t\t</>\t\r\n\t)\r\n}\r\n\r\nfunction GroupRouting() {\r\n\treturn (\r\n\t\t<>\r\n\t\t<Switch>\r\n\t\t\t{/* <Route exact path=\"/group-raw-material-add-general-:groupName\">\r\n\t\t\t\t<AddRawMaterialToGroupPage />\r\n\t\t\t</Route>\r\n\t\t\t<Route exact path=\"/group-fixed-cost-add-general-:groupName\">\r\n\t\t\t\t<AddFixedCostToGroupPage />\r\n\t\t\t</Route>\r\n\t\t\t<Route exact path=\"/group-water-add-general-:groupName\">\r\n\t\t\t\t<AddWaterToGroupPage />\r\n\t\t\t</Route> */}\r\n\t\t\t<Route exact path=\"/group-:groupName\">\r\n\t\t\t\t<GroupPage />\r\n\t\t\t</Route>\r\n\t\t</Switch>\r\n\t\t</>\t\r\n\t)\r\n}\r\n\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}